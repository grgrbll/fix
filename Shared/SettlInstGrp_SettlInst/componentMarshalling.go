package SettlInstGrp_SettlInst

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import Parties_PartyIDs "grgrbll/fix/Shared/Parties_PartyIDs"

import DlvyInstGrp_DlvyInst "grgrbll/fix/Shared/DlvyInstGrp_DlvyInst"


func (m *SettlInstGrp_SettlInst) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.SettlInstID.HasValue() {
        (*res).WriteString("162=")
        val, err := m.SettlInstID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlInstTransType.HasValue() {
        (*res).WriteString("163=")
        val, err := m.SettlInstTransType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlInstRefID.HasValue() {
        (*res).WriteString("214=")
        val, err := m.SettlInstRefID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PartyIDs) > 0 {
    
    (*res).WriteString("453=")
    (*res).WriteString(strconv.Itoa(len(m.PartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.PartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.Side.HasValue() {
        (*res).WriteString("54=")
        val, err := m.Side.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Product.HasValue() {
        (*res).WriteString("460=")
        val, err := m.Product.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityType.HasValue() {
        (*res).WriteString("167=")
        val, err := m.SecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CFICode.HasValue() {
        (*res).WriteString("461=")
        val, err := m.CFICode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EffectiveTime.HasValue() {
        (*res).WriteString("168=")
        val, err := m.EffectiveTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExpireTime.HasValue() {
        (*res).WriteString("126=")
        val, err := m.ExpireTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastUpdateTime.HasValue() {
        (*res).WriteString("779=")
        val, err := m.LastUpdateTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlDeliveryType.HasValue() {
        (*res).WriteString("172=")
        val, err := m.SettlDeliveryType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StandInstDbType.HasValue() {
        (*res).WriteString("169=")
        val, err := m.StandInstDbType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StandInstDbName.HasValue() {
        (*res).WriteString("170=")
        val, err := m.StandInstDbName.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StandInstDbID.HasValue() {
        (*res).WriteString("171=")
        val, err := m.StandInstDbID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.DlvyInst) > 0 {
    
    (*res).WriteString("85=")
    (*res).WriteString(strconv.Itoa(len(m.DlvyInst)))
    (*res).WriteString("\x01")
    for _, g := range m.DlvyInst {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.PaymentMethod.HasValue() {
        (*res).WriteString("492=")
        val, err := m.PaymentMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PaymentRef.HasValue() {
        (*res).WriteString("476=")
        val, err := m.PaymentRef.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CardHolderName.HasValue() {
        (*res).WriteString("488=")
        val, err := m.CardHolderName.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CardNumber.HasValue() {
        (*res).WriteString("489=")
        val, err := m.CardNumber.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CardStartDate.HasValue() {
        (*res).WriteString("503=")
        val, err := m.CardStartDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CardExpDate.HasValue() {
        (*res).WriteString("490=")
        val, err := m.CardExpDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CardIssNum.HasValue() {
        (*res).WriteString("491=")
        val, err := m.CardIssNum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PaymentDate.HasValue() {
        (*res).WriteString("504=")
        val, err := m.PaymentDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PaymentRemitterID.HasValue() {
        (*res).WriteString("505=")
        val, err := m.PaymentRemitterID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlCurrency.HasValue() {
        (*res).WriteString("120=")
        val, err := m.SettlCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *SettlInstGrp_SettlInst) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message SettlInstGrp_SettlInst (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *SettlInstGrp_SettlInst) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 162:
            if !m.SettlInstID.HasValue() {
                used = true
                err = m.SettlInstID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 163:
            if !m.SettlInstTransType.HasValue() {
                used = true
                err = m.SettlInstTransType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 214:
            if !m.SettlInstRefID.HasValue() {
                used = true
                err = m.SettlInstRefID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 453:
            // This counter (NoPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PartyIDs = make([]Parties_PartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 54:
            if !m.Side.HasValue() {
                used = true
                err = m.Side.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 460:
            if !m.Product.HasValue() {
                used = true
                err = m.Product.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 167:
            if !m.SecurityType.HasValue() {
                used = true
                err = m.SecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 461:
            if !m.CFICode.HasValue() {
                used = true
                err = m.CFICode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 168:
            if !m.EffectiveTime.HasValue() {
                used = true
                err = m.EffectiveTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 126:
            if !m.ExpireTime.HasValue() {
                used = true
                err = m.ExpireTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 779:
            if !m.LastUpdateTime.HasValue() {
                used = true
                err = m.LastUpdateTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 172:
            if !m.SettlDeliveryType.HasValue() {
                used = true
                err = m.SettlDeliveryType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 169:
            if !m.StandInstDbType.HasValue() {
                used = true
                err = m.StandInstDbType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 170:
            if !m.StandInstDbName.HasValue() {
                used = true
                err = m.StandInstDbName.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 171:
            if !m.StandInstDbID.HasValue() {
                used = true
                err = m.StandInstDbID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 85:
            // This counter (NoDlvyInst) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.DlvyInst = make([]DlvyInstGrp_DlvyInst, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.DlvyInst[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 492:
            if !m.PaymentMethod.HasValue() {
                used = true
                err = m.PaymentMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 476:
            if !m.PaymentRef.HasValue() {
                used = true
                err = m.PaymentRef.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 488:
            if !m.CardHolderName.HasValue() {
                used = true
                err = m.CardHolderName.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 489:
            if !m.CardNumber.HasValue() {
                used = true
                err = m.CardNumber.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 503:
            if !m.CardStartDate.HasValue() {
                used = true
                err = m.CardStartDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 490:
            if !m.CardExpDate.HasValue() {
                used = true
                err = m.CardExpDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 491:
            if !m.CardIssNum.HasValue() {
                used = true
                err = m.CardIssNum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 504:
            if !m.PaymentDate.HasValue() {
                used = true
                err = m.PaymentDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 505:
            if !m.PaymentRemitterID.HasValue() {
                used = true
                err = m.PaymentRemitterID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 120:
            if !m.SettlCurrency.HasValue() {
                used = true
                err = m.SettlCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


