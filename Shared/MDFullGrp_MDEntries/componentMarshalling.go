package MDFullGrp_MDEntries

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import Parties_PartyIDs "grgrbll/fix/Shared/Parties_PartyIDs"


func (m *MDFullGrp_MDEntries) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.MDEntryType.HasValue() {
        (*res).WriteString("269=")
        val, err := m.MDEntryType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryPx.HasValue() {
        (*res).WriteString("270=")
        val, err := m.MDEntryPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Currency.HasValue() {
        (*res).WriteString("15=")
        val, err := m.Currency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntrySize.HasValue() {
        (*res).WriteString("271=")
        val, err := m.MDEntrySize.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryDate.HasValue() {
        (*res).WriteString("272=")
        val, err := m.MDEntryDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryTime.HasValue() {
        (*res).WriteString("273=")
        val, err := m.MDEntryTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TickDirection.HasValue() {
        (*res).WriteString("274=")
        val, err := m.TickDirection.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDMkt.HasValue() {
        (*res).WriteString("275=")
        val, err := m.MDMkt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionID.HasValue() {
        (*res).WriteString("336=")
        val, err := m.TradingSessionID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionSubID.HasValue() {
        (*res).WriteString("625=")
        val, err := m.TradingSessionSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.QuoteCondition.HasValue() {
        (*res).WriteString("276=")
        val, err := m.QuoteCondition.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeCondition.HasValue() {
        (*res).WriteString("277=")
        val, err := m.TradeCondition.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryOriginator.HasValue() {
        (*res).WriteString("282=")
        val, err := m.MDEntryOriginator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LocationID.HasValue() {
        (*res).WriteString("283=")
        val, err := m.LocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeskID.HasValue() {
        (*res).WriteString("284=")
        val, err := m.DeskID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OpenCloseSettlFlag.HasValue() {
        (*res).WriteString("286=")
        val, err := m.OpenCloseSettlFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TimeInForce.HasValue() {
        (*res).WriteString("59=")
        val, err := m.TimeInForce.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExpireDate.HasValue() {
        (*res).WriteString("432=")
        val, err := m.ExpireDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExpireTime.HasValue() {
        (*res).WriteString("126=")
        val, err := m.ExpireTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MinQty.HasValue() {
        (*res).WriteString("110=")
        val, err := m.MinQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExecInst.HasValue() {
        (*res).WriteString("18=")
        val, err := m.ExecInst.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SellerDays.HasValue() {
        (*res).WriteString("287=")
        val, err := m.SellerDays.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrderID.HasValue() {
        (*res).WriteString("37=")
        val, err := m.OrderID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.QuoteEntryID.HasValue() {
        (*res).WriteString("299=")
        val, err := m.QuoteEntryID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryBuyer.HasValue() {
        (*res).WriteString("288=")
        val, err := m.MDEntryBuyer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntrySeller.HasValue() {
        (*res).WriteString("289=")
        val, err := m.MDEntrySeller.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.NumberOfOrders.HasValue() {
        (*res).WriteString("346=")
        val, err := m.NumberOfOrders.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryPositionNo.HasValue() {
        (*res).WriteString("290=")
        val, err := m.MDEntryPositionNo.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Scope.HasValue() {
        (*res).WriteString("546=")
        val, err := m.Scope.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PriceDelta.HasValue() {
        (*res).WriteString("811=")
        val, err := m.PriceDelta.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Text.HasValue() {
        (*res).WriteString("58=")
        val, err := m.Text.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedTextLen.HasValue() {
        (*res).WriteString("354=")
        val, err := m.EncodedTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedText.HasValue() {
        (*res).WriteString("355=")
        val, err := m.EncodedText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDPriceLevel.HasValue() {
        (*res).WriteString("1023=")
        val, err := m.MDPriceLevel.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrderCapacity.HasValue() {
        (*res).WriteString("528=")
        val, err := m.OrderCapacity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDOriginType.HasValue() {
        (*res).WriteString("1024=")
        val, err := m.MDOriginType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.HighPx.HasValue() {
        (*res).WriteString("332=")
        val, err := m.HighPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LowPx.HasValue() {
        (*res).WriteString("333=")
        val, err := m.LowPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeVolume.HasValue() {
        (*res).WriteString("1020=")
        val, err := m.TradeVolume.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlType.HasValue() {
        (*res).WriteString("63=")
        val, err := m.SettlType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlDate.HasValue() {
        (*res).WriteString("64=")
        val, err := m.SettlDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDQuoteType.HasValue() {
        (*res).WriteString("1070=")
        val, err := m.MDQuoteType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RptSeq.HasValue() {
        (*res).WriteString("83=")
        val, err := m.RptSeq.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DealingCapacity.HasValue() {
        (*res).WriteString("1048=")
        val, err := m.DealingCapacity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntrySpotRate.HasValue() {
        (*res).WriteString("1026=")
        val, err := m.MDEntrySpotRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryForwardPoints.HasValue() {
        (*res).WriteString("1027=")
        val, err := m.MDEntryForwardPoints.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MDEntryID.HasValue() {
        (*res).WriteString("278=")
        val, err := m.MDEntryID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PartyIDs) > 0 {
    
    (*res).WriteString("453=")
    (*res).WriteString(strconv.Itoa(len(m.PartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.PartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.SecondaryOrderID.HasValue() {
        (*res).WriteString("198=")
        val, err := m.SecondaryOrderID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrdType.HasValue() {
        (*res).WriteString("40=")
        val, err := m.OrdType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *MDFullGrp_MDEntries) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message MDFullGrp_MDEntries (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *MDFullGrp_MDEntries) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 269:
            if !m.MDEntryType.HasValue() {
                used = true
                err = m.MDEntryType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 270:
            if !m.MDEntryPx.HasValue() {
                used = true
                err = m.MDEntryPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 15:
            if !m.Currency.HasValue() {
                used = true
                err = m.Currency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 271:
            if !m.MDEntrySize.HasValue() {
                used = true
                err = m.MDEntrySize.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 272:
            if !m.MDEntryDate.HasValue() {
                used = true
                err = m.MDEntryDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 273:
            if !m.MDEntryTime.HasValue() {
                used = true
                err = m.MDEntryTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 274:
            if !m.TickDirection.HasValue() {
                used = true
                err = m.TickDirection.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 275:
            if !m.MDMkt.HasValue() {
                used = true
                err = m.MDMkt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 336:
            if !m.TradingSessionID.HasValue() {
                used = true
                err = m.TradingSessionID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 625:
            if !m.TradingSessionSubID.HasValue() {
                used = true
                err = m.TradingSessionSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 276:
            if !m.QuoteCondition.HasValue() {
                used = true
                err = m.QuoteCondition.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 277:
            if !m.TradeCondition.HasValue() {
                used = true
                err = m.TradeCondition.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 282:
            if !m.MDEntryOriginator.HasValue() {
                used = true
                err = m.MDEntryOriginator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 283:
            if !m.LocationID.HasValue() {
                used = true
                err = m.LocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 284:
            if !m.DeskID.HasValue() {
                used = true
                err = m.DeskID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 286:
            if !m.OpenCloseSettlFlag.HasValue() {
                used = true
                err = m.OpenCloseSettlFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 59:
            if !m.TimeInForce.HasValue() {
                used = true
                err = m.TimeInForce.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 432:
            if !m.ExpireDate.HasValue() {
                used = true
                err = m.ExpireDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 126:
            if !m.ExpireTime.HasValue() {
                used = true
                err = m.ExpireTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 110:
            if !m.MinQty.HasValue() {
                used = true
                err = m.MinQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 18:
            if !m.ExecInst.HasValue() {
                used = true
                err = m.ExecInst.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 287:
            if !m.SellerDays.HasValue() {
                used = true
                err = m.SellerDays.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 37:
            if !m.OrderID.HasValue() {
                used = true
                err = m.OrderID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 299:
            if !m.QuoteEntryID.HasValue() {
                used = true
                err = m.QuoteEntryID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 288:
            if !m.MDEntryBuyer.HasValue() {
                used = true
                err = m.MDEntryBuyer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 289:
            if !m.MDEntrySeller.HasValue() {
                used = true
                err = m.MDEntrySeller.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 346:
            if !m.NumberOfOrders.HasValue() {
                used = true
                err = m.NumberOfOrders.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 290:
            if !m.MDEntryPositionNo.HasValue() {
                used = true
                err = m.MDEntryPositionNo.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 546:
            if !m.Scope.HasValue() {
                used = true
                err = m.Scope.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 811:
            if !m.PriceDelta.HasValue() {
                used = true
                err = m.PriceDelta.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 58:
            if !m.Text.HasValue() {
                used = true
                err = m.Text.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 354:
            if !m.EncodedTextLen.HasValue() {
                used = true
                err = m.EncodedTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 355:
            if !m.EncodedText.HasValue() {
                used = true
                err = m.EncodedText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1023:
            if !m.MDPriceLevel.HasValue() {
                used = true
                err = m.MDPriceLevel.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 528:
            if !m.OrderCapacity.HasValue() {
                used = true
                err = m.OrderCapacity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1024:
            if !m.MDOriginType.HasValue() {
                used = true
                err = m.MDOriginType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 332:
            if !m.HighPx.HasValue() {
                used = true
                err = m.HighPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 333:
            if !m.LowPx.HasValue() {
                used = true
                err = m.LowPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1020:
            if !m.TradeVolume.HasValue() {
                used = true
                err = m.TradeVolume.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 63:
            if !m.SettlType.HasValue() {
                used = true
                err = m.SettlType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 64:
            if !m.SettlDate.HasValue() {
                used = true
                err = m.SettlDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1070:
            if !m.MDQuoteType.HasValue() {
                used = true
                err = m.MDQuoteType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 83:
            if !m.RptSeq.HasValue() {
                used = true
                err = m.RptSeq.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1048:
            if !m.DealingCapacity.HasValue() {
                used = true
                err = m.DealingCapacity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1026:
            if !m.MDEntrySpotRate.HasValue() {
                used = true
                err = m.MDEntrySpotRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1027:
            if !m.MDEntryForwardPoints.HasValue() {
                used = true
                err = m.MDEntryForwardPoints.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 278:
            if !m.MDEntryID.HasValue() {
                used = true
                err = m.MDEntryID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 453:
            // This counter (NoPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PartyIDs = make([]Parties_PartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 198:
            if !m.SecondaryOrderID.HasValue() {
                used = true
                err = m.SecondaryOrderID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 40:
            if !m.OrdType.HasValue() {
                used = true
                err = m.OrdType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


