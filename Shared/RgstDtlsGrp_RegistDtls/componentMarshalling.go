package RgstDtlsGrp_RegistDtls

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import NestedParties_NestedPartyIDs "grgrbll/fix/Shared/NestedParties_NestedPartyIDs"


func (m *RgstDtlsGrp_RegistDtls) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.RegistDtls.HasValue() {
        (*res).WriteString("509=")
        val, err := m.RegistDtls.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RegistEmail.HasValue() {
        (*res).WriteString("511=")
        val, err := m.RegistEmail.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MailingDtls.HasValue() {
        (*res).WriteString("474=")
        val, err := m.MailingDtls.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MailingInst.HasValue() {
        (*res).WriteString("482=")
        val, err := m.MailingInst.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.NestedPartyIDs) > 0 {
    
    (*res).WriteString("539=")
    (*res).WriteString(strconv.Itoa(len(m.NestedPartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.NestedPartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.OwnerType.HasValue() {
        (*res).WriteString("522=")
        val, err := m.OwnerType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DateOfBirth.HasValue() {
        (*res).WriteString("486=")
        val, err := m.DateOfBirth.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InvestorCountryOfResidence.HasValue() {
        (*res).WriteString("475=")
        val, err := m.InvestorCountryOfResidence.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *RgstDtlsGrp_RegistDtls) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message RgstDtlsGrp_RegistDtls (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *RgstDtlsGrp_RegistDtls) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 509:
            if !m.RegistDtls.HasValue() {
                used = true
                err = m.RegistDtls.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 511:
            if !m.RegistEmail.HasValue() {
                used = true
                err = m.RegistEmail.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 474:
            if !m.MailingDtls.HasValue() {
                used = true
                err = m.MailingDtls.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 482:
            if !m.MailingInst.HasValue() {
                used = true
                err = m.MailingInst.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 539:
            // This counter (NoNestedPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.NestedPartyIDs = make([]NestedParties_NestedPartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.NestedPartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 522:
            if !m.OwnerType.HasValue() {
                used = true
                err = m.OwnerType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 486:
            if !m.DateOfBirth.HasValue() {
                used = true
                err = m.DateOfBirth.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 475:
            if !m.InvestorCountryOfResidence.HasValue() {
                used = true
                err = m.InvestorCountryOfResidence.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


