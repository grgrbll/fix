package RgstDtlsGrp_RegistDtls

import "bufio"
import "regexp"

// Autogenerated at , do not edit



import NestedParties_NestedPartyIDs "grgrbll/fix/Shared/NestedParties_NestedPartyIDs"


type rgstDtlsGrp_RegistDtls_RegexValidator struct {
    RegistDtls *(regexp.Regexp)
    RegistEmail *(regexp.Regexp)
    MailingDtls *(regexp.Regexp)
    MailingInst *(regexp.Regexp)
    OwnerType *(regexp.Regexp)
    DateOfBirth *(regexp.Regexp)
    InvestorCountryOfResidence *(regexp.Regexp)
    _controlBlock fixMessageControlBlock
}


var myRgstDtlsGrp_RegistDtls_RegexValidator rgstDtlsGrp_RegistDtls_RegexValidator

func init() {
    myRgstDtlsGrp_RegistDtls_RegexValidator
    myRgstDtlsGrp_RegistDtls_RegexValidator.RegistDtls = regexp.MustCompile(`[^|]*`)
    myRgstDtlsGrp_RegistDtls_RegexValidator.RegistEmail = regexp.MustCompile(`[^|]*`)
    myRgstDtlsGrp_RegistDtls_RegexValidator.MailingDtls = regexp.MustCompile(`[^|]*`)
    myRgstDtlsGrp_RegistDtls_RegexValidator.MailingInst = regexp.MustCompile(`[^|]*`)
    myRgstDtlsGrp_RegistDtls_RegexValidator.OwnerType = regexp.MustCompile(`-?\d+`)
    myRgstDtlsGrp_RegistDtls_RegexValidator.DateOfBirth = regexp.MustCompile(`[0-9]{8}`)
    myRgstDtlsGrp_RegistDtls_RegexValidator.InvestorCountryOfResidence = regexp.MustCompile(`[A-Z]{2}`)
}



func (m *RgstDtlsGrp_RegistDtls) HasRequiredFields() bool {
    valid := true
    
    

    
    
    for _, g := range(m.NestedPartyIDs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    
    
    return valid
}




