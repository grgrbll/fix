package AllocAckGrp_Allocs

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import NestedParties_NestedPartyIDs "grgrbll/fix/Shared/NestedParties_NestedPartyIDs"


func (m *AllocAckGrp_Allocs) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.AllocAccount.HasValue() {
        (*res).WriteString("79=")
        val, err := m.AllocAccount.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocAcctIDSource.HasValue() {
        (*res).WriteString("661=")
        val, err := m.AllocAcctIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocPrice.HasValue() {
        (*res).WriteString("366=")
        val, err := m.AllocPrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IndividualAllocID.HasValue() {
        (*res).WriteString("467=")
        val, err := m.IndividualAllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IndividualAllocRejCode.HasValue() {
        (*res).WriteString("776=")
        val, err := m.IndividualAllocRejCode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocText.HasValue() {
        (*res).WriteString("161=")
        val, err := m.AllocText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedAllocTextLen.HasValue() {
        (*res).WriteString("360=")
        val, err := m.EncodedAllocTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedAllocText.HasValue() {
        (*res).WriteString("361=")
        val, err := m.EncodedAllocText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryIndividualAllocID.HasValue() {
        (*res).WriteString("989=")
        val, err := m.SecondaryIndividualAllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocCustomerCapacity.HasValue() {
        (*res).WriteString("993=")
        val, err := m.AllocCustomerCapacity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IndividualAllocType.HasValue() {
        (*res).WriteString("992=")
        val, err := m.IndividualAllocType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocQty.HasValue() {
        (*res).WriteString("80=")
        val, err := m.AllocQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.NestedPartyIDs) > 0 {
    
    (*res).WriteString("539=")
    (*res).WriteString(strconv.Itoa(len(m.NestedPartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.NestedPartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.AllocPositionEffect.HasValue() {
        (*res).WriteString("1047=")
        val, err := m.AllocPositionEffect.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *AllocAckGrp_Allocs) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message AllocAckGrp_Allocs (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *AllocAckGrp_Allocs) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 79:
            if !m.AllocAccount.HasValue() {
                used = true
                err = m.AllocAccount.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 661:
            if !m.AllocAcctIDSource.HasValue() {
                used = true
                err = m.AllocAcctIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 366:
            if !m.AllocPrice.HasValue() {
                used = true
                err = m.AllocPrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 467:
            if !m.IndividualAllocID.HasValue() {
                used = true
                err = m.IndividualAllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 776:
            if !m.IndividualAllocRejCode.HasValue() {
                used = true
                err = m.IndividualAllocRejCode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 161:
            if !m.AllocText.HasValue() {
                used = true
                err = m.AllocText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 360:
            if !m.EncodedAllocTextLen.HasValue() {
                used = true
                err = m.EncodedAllocTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 361:
            if !m.EncodedAllocText.HasValue() {
                used = true
                err = m.EncodedAllocText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 989:
            if !m.SecondaryIndividualAllocID.HasValue() {
                used = true
                err = m.SecondaryIndividualAllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 993:
            if !m.AllocCustomerCapacity.HasValue() {
                used = true
                err = m.AllocCustomerCapacity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 992:
            if !m.IndividualAllocType.HasValue() {
                used = true
                err = m.IndividualAllocType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 80:
            if !m.AllocQty.HasValue() {
                used = true
                err = m.AllocQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 539:
            // This counter (NoNestedPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.NestedPartyIDs = make([]NestedParties_NestedPartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.NestedPartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1047:
            if !m.AllocPositionEffect.HasValue() {
                used = true
                err = m.AllocPositionEffect.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


