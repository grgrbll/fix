package LegPreAllocGrp_LegAllocs

import "bufio"
import "regexp"

// Autogenerated at , do not edit



import NestedParties2_Nested2PartyIDs "grgrbll/fix/Shared/NestedParties2_Nested2PartyIDs"


type legPreAllocGrp_LegAllocs_RegexValidator struct {
    LegAllocAccount *(regexp.Regexp)
    LegIndividualAllocID *(regexp.Regexp)
    LegAllocQty *(regexp.Regexp)
    LegAllocAcctIDSource *(regexp.Regexp)
    LegSettlCurrency *(regexp.Regexp)
    _controlBlock fixMessageControlBlock
}


var myLegPreAllocGrp_LegAllocs_RegexValidator legPreAllocGrp_LegAllocs_RegexValidator

func init() {
    myLegPreAllocGrp_LegAllocs_RegexValidator
    myLegPreAllocGrp_LegAllocs_RegexValidator.LegAllocAccount = regexp.MustCompile(`[^|]*`)
    myLegPreAllocGrp_LegAllocs_RegexValidator.LegIndividualAllocID = regexp.MustCompile(`[^|]*`)
    myLegPreAllocGrp_LegAllocs_RegexValidator.LegAllocQty = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myLegPreAllocGrp_LegAllocs_RegexValidator.LegAllocAcctIDSource = regexp.MustCompile(`[^|]*`)
    myLegPreAllocGrp_LegAllocs_RegexValidator.LegSettlCurrency = regexp.MustCompile(`[A-Z]{3}`)
}



func (m *LegPreAllocGrp_LegAllocs) HasRequiredFields() bool {
    valid := true
    
    

    
    
    for _, g := range(m.Nested2PartyIDs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    
    
    return valid
}




