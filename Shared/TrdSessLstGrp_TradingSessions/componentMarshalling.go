package TrdSessLstGrp_TradingSessions

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit




func (m *TrdSessLstGrp_TradingSessions) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.TradingSessionID.HasValue() {
        (*res).WriteString("336=")
        val, err := m.TradingSessionID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionSubID.HasValue() {
        (*res).WriteString("625=")
        val, err := m.TradingSessionSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityExchange.HasValue() {
        (*res).WriteString("207=")
        val, err := m.SecurityExchange.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesMethod.HasValue() {
        (*res).WriteString("338=")
        val, err := m.TradSesMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesMode.HasValue() {
        (*res).WriteString("339=")
        val, err := m.TradSesMode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnsolicitedIndicator.HasValue() {
        (*res).WriteString("325=")
        val, err := m.UnsolicitedIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesStatus.HasValue() {
        (*res).WriteString("340=")
        val, err := m.TradSesStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesStatusRejReason.HasValue() {
        (*res).WriteString("567=")
        val, err := m.TradSesStatusRejReason.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesStartTime.HasValue() {
        (*res).WriteString("341=")
        val, err := m.TradSesStartTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesOpenTime.HasValue() {
        (*res).WriteString("342=")
        val, err := m.TradSesOpenTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesPreCloseTime.HasValue() {
        (*res).WriteString("343=")
        val, err := m.TradSesPreCloseTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesCloseTime.HasValue() {
        (*res).WriteString("344=")
        val, err := m.TradSesCloseTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradSesEndTime.HasValue() {
        (*res).WriteString("345=")
        val, err := m.TradSesEndTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TotalVolumeTraded.HasValue() {
        (*res).WriteString("387=")
        val, err := m.TotalVolumeTraded.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Text.HasValue() {
        (*res).WriteString("58=")
        val, err := m.Text.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedTextLen.HasValue() {
        (*res).WriteString("354=")
        val, err := m.EncodedTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedText.HasValue() {
        (*res).WriteString("355=")
        val, err := m.EncodedText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *TrdSessLstGrp_TradingSessions) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message TrdSessLstGrp_TradingSessions (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *TrdSessLstGrp_TradingSessions) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 336:
            if !m.TradingSessionID.HasValue() {
                used = true
                err = m.TradingSessionID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 625:
            if !m.TradingSessionSubID.HasValue() {
                used = true
                err = m.TradingSessionSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 207:
            if !m.SecurityExchange.HasValue() {
                used = true
                err = m.SecurityExchange.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 338:
            if !m.TradSesMethod.HasValue() {
                used = true
                err = m.TradSesMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 339:
            if !m.TradSesMode.HasValue() {
                used = true
                err = m.TradSesMode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 325:
            if !m.UnsolicitedIndicator.HasValue() {
                used = true
                err = m.UnsolicitedIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 340:
            if !m.TradSesStatus.HasValue() {
                used = true
                err = m.TradSesStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 567:
            if !m.TradSesStatusRejReason.HasValue() {
                used = true
                err = m.TradSesStatusRejReason.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 341:
            if !m.TradSesStartTime.HasValue() {
                used = true
                err = m.TradSesStartTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 342:
            if !m.TradSesOpenTime.HasValue() {
                used = true
                err = m.TradSesOpenTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 343:
            if !m.TradSesPreCloseTime.HasValue() {
                used = true
                err = m.TradSesPreCloseTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 344:
            if !m.TradSesCloseTime.HasValue() {
                used = true
                err = m.TradSesCloseTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 345:
            if !m.TradSesEndTime.HasValue() {
                used = true
                err = m.TradSesEndTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 387:
            if !m.TotalVolumeTraded.HasValue() {
                used = true
                err = m.TotalVolumeTraded.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 58:
            if !m.Text.HasValue() {
                used = true
                err = m.Text.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 354:
            if !m.EncodedTextLen.HasValue() {
                used = true
                err = m.EncodedTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 355:
            if !m.EncodedText.HasValue() {
                used = true
                err = m.EncodedText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


