package BidDescReqGrp_BidDescriptors

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit




func (m *BidDescReqGrp_BidDescriptors) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.BidDescriptorType.HasValue() {
        (*res).WriteString("399=")
        val, err := m.BidDescriptorType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BidDescriptor.HasValue() {
        (*res).WriteString("400=")
        val, err := m.BidDescriptor.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SideValueInd.HasValue() {
        (*res).WriteString("401=")
        val, err := m.SideValueInd.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LiquidityValue.HasValue() {
        (*res).WriteString("404=")
        val, err := m.LiquidityValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LiquidityNumSecurities.HasValue() {
        (*res).WriteString("441=")
        val, err := m.LiquidityNumSecurities.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LiquidityPctLow.HasValue() {
        (*res).WriteString("402=")
        val, err := m.LiquidityPctLow.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LiquidityPctHigh.HasValue() {
        (*res).WriteString("403=")
        val, err := m.LiquidityPctHigh.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EFPTrackingError.HasValue() {
        (*res).WriteString("405=")
        val, err := m.EFPTrackingError.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.FairValue.HasValue() {
        (*res).WriteString("406=")
        val, err := m.FairValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OutsideIndexPct.HasValue() {
        (*res).WriteString("407=")
        val, err := m.OutsideIndexPct.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ValueOfFutures.HasValue() {
        (*res).WriteString("408=")
        val, err := m.ValueOfFutures.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *BidDescReqGrp_BidDescriptors) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message BidDescReqGrp_BidDescriptors (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *BidDescReqGrp_BidDescriptors) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 399:
            if !m.BidDescriptorType.HasValue() {
                used = true
                err = m.BidDescriptorType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 400:
            if !m.BidDescriptor.HasValue() {
                used = true
                err = m.BidDescriptor.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 401:
            if !m.SideValueInd.HasValue() {
                used = true
                err = m.SideValueInd.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 404:
            if !m.LiquidityValue.HasValue() {
                used = true
                err = m.LiquidityValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 441:
            if !m.LiquidityNumSecurities.HasValue() {
                used = true
                err = m.LiquidityNumSecurities.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 402:
            if !m.LiquidityPctLow.HasValue() {
                used = true
                err = m.LiquidityPctLow.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 403:
            if !m.LiquidityPctHigh.HasValue() {
                used = true
                err = m.LiquidityPctHigh.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 405:
            if !m.EFPTrackingError.HasValue() {
                used = true
                err = m.EFPTrackingError.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 406:
            if !m.FairValue.HasValue() {
                used = true
                err = m.FairValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 407:
            if !m.OutsideIndexPct.HasValue() {
                used = true
                err = m.OutsideIndexPct.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 408:
            if !m.ValueOfFutures.HasValue() {
                used = true
                err = m.ValueOfFutures.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


