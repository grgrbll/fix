package AllocGrp_Allocs

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import NestedParties_NestedPartyIDs "grgrbll/fix/Shared/NestedParties_NestedPartyIDs"

import MiscFeesGrp_MiscFees "grgrbll/fix/Shared/MiscFeesGrp_MiscFees"

import ClrInstGrp_ClearingInstructions "grgrbll/fix/Shared/ClrInstGrp_ClearingInstructions"

import DlvyInstGrp_DlvyInst "grgrbll/fix/Shared/DlvyInstGrp_DlvyInst"


func (m *AllocGrp_Allocs) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.AllocAccount.HasValue() {
        (*res).WriteString("79=")
        val, err := m.AllocAccount.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocAcctIDSource.HasValue() {
        (*res).WriteString("661=")
        val, err := m.AllocAcctIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MatchStatus.HasValue() {
        (*res).WriteString("573=")
        val, err := m.MatchStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocPrice.HasValue() {
        (*res).WriteString("366=")
        val, err := m.AllocPrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocQty.HasValue() {
        (*res).WriteString("80=")
        val, err := m.AllocQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IndividualAllocID.HasValue() {
        (*res).WriteString("467=")
        val, err := m.IndividualAllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ProcessCode.HasValue() {
        (*res).WriteString("81=")
        val, err := m.ProcessCode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.NestedPartyIDs) > 0 {
    
    (*res).WriteString("539=")
    (*res).WriteString(strconv.Itoa(len(m.NestedPartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.NestedPartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.NotifyBrokerOfCredit.HasValue() {
        (*res).WriteString("208=")
        val, err := m.NotifyBrokerOfCredit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocHandlInst.HasValue() {
        (*res).WriteString("209=")
        val, err := m.AllocHandlInst.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocText.HasValue() {
        (*res).WriteString("161=")
        val, err := m.AllocText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedAllocTextLen.HasValue() {
        (*res).WriteString("360=")
        val, err := m.EncodedAllocTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedAllocText.HasValue() {
        (*res).WriteString("361=")
        val, err := m.EncodedAllocText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Commission.HasValue() {
        (*res).WriteString("12=")
        val, err := m.Commission.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CommType.HasValue() {
        (*res).WriteString("13=")
        val, err := m.CommType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CommCurrency.HasValue() {
        (*res).WriteString("479=")
        val, err := m.CommCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.FundRenewWaiv.HasValue() {
        (*res).WriteString("497=")
        val, err := m.FundRenewWaiv.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocAvgPx.HasValue() {
        (*res).WriteString("153=")
        val, err := m.AllocAvgPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocNetMoney.HasValue() {
        (*res).WriteString("154=")
        val, err := m.AllocNetMoney.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlCurrAmt.HasValue() {
        (*res).WriteString("119=")
        val, err := m.SettlCurrAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocSettlCurrAmt.HasValue() {
        (*res).WriteString("737=")
        val, err := m.AllocSettlCurrAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlCurrency.HasValue() {
        (*res).WriteString("120=")
        val, err := m.SettlCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocSettlCurrency.HasValue() {
        (*res).WriteString("736=")
        val, err := m.AllocSettlCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlCurrFxRate.HasValue() {
        (*res).WriteString("155=")
        val, err := m.SettlCurrFxRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlCurrFxRateCalc.HasValue() {
        (*res).WriteString("156=")
        val, err := m.SettlCurrFxRateCalc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocAccruedInterestAmt.HasValue() {
        (*res).WriteString("742=")
        val, err := m.AllocAccruedInterestAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocInterestAtMaturity.HasValue() {
        (*res).WriteString("741=")
        val, err := m.AllocInterestAtMaturity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.MiscFees) > 0 {
    
    (*res).WriteString("136=")
    (*res).WriteString(strconv.Itoa(len(m.MiscFees)))
    (*res).WriteString("\x01")
    for _, g := range m.MiscFees {
        err = g.MarshalFIX(res)
    }
    }
    
    if len(m.ClearingInstructions) > 0 {
    
    (*res).WriteString("576=")
    (*res).WriteString(strconv.Itoa(len(m.ClearingInstructions)))
    (*res).WriteString("\x01")
    for _, g := range m.ClearingInstructions {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.AllocSettlInstType.HasValue() {
        (*res).WriteString("780=")
        val, err := m.AllocSettlInstType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlDeliveryType.HasValue() {
        (*res).WriteString("172=")
        val, err := m.SettlDeliveryType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StandInstDbType.HasValue() {
        (*res).WriteString("169=")
        val, err := m.StandInstDbType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StandInstDbName.HasValue() {
        (*res).WriteString("170=")
        val, err := m.StandInstDbName.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StandInstDbID.HasValue() {
        (*res).WriteString("171=")
        val, err := m.StandInstDbID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.DlvyInst) > 0 {
    
    (*res).WriteString("85=")
    (*res).WriteString(strconv.Itoa(len(m.DlvyInst)))
    (*res).WriteString("\x01")
    for _, g := range m.DlvyInst {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.SecondaryIndividualAllocID.HasValue() {
        (*res).WriteString("989=")
        val, err := m.SecondaryIndividualAllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocMethod.HasValue() {
        (*res).WriteString("1002=")
        val, err := m.AllocMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocCustomerCapacity.HasValue() {
        (*res).WriteString("993=")
        val, err := m.AllocCustomerCapacity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IndividualAllocType.HasValue() {
        (*res).WriteString("992=")
        val, err := m.IndividualAllocType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocPositionEffect.HasValue() {
        (*res).WriteString("1047=")
        val, err := m.AllocPositionEffect.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ClearingFeeIndicator.HasValue() {
        (*res).WriteString("635=")
        val, err := m.ClearingFeeIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *AllocGrp_Allocs) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message AllocGrp_Allocs (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *AllocGrp_Allocs) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 79:
            if !m.AllocAccount.HasValue() {
                used = true
                err = m.AllocAccount.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 661:
            if !m.AllocAcctIDSource.HasValue() {
                used = true
                err = m.AllocAcctIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 573:
            if !m.MatchStatus.HasValue() {
                used = true
                err = m.MatchStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 366:
            if !m.AllocPrice.HasValue() {
                used = true
                err = m.AllocPrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 80:
            if !m.AllocQty.HasValue() {
                used = true
                err = m.AllocQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 467:
            if !m.IndividualAllocID.HasValue() {
                used = true
                err = m.IndividualAllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 81:
            if !m.ProcessCode.HasValue() {
                used = true
                err = m.ProcessCode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 539:
            // This counter (NoNestedPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.NestedPartyIDs = make([]NestedParties_NestedPartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.NestedPartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 208:
            if !m.NotifyBrokerOfCredit.HasValue() {
                used = true
                err = m.NotifyBrokerOfCredit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 209:
            if !m.AllocHandlInst.HasValue() {
                used = true
                err = m.AllocHandlInst.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 161:
            if !m.AllocText.HasValue() {
                used = true
                err = m.AllocText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 360:
            if !m.EncodedAllocTextLen.HasValue() {
                used = true
                err = m.EncodedAllocTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 361:
            if !m.EncodedAllocText.HasValue() {
                used = true
                err = m.EncodedAllocText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 12:
            if !m.Commission.HasValue() {
                used = true
                err = m.Commission.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 13:
            if !m.CommType.HasValue() {
                used = true
                err = m.CommType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 479:
            if !m.CommCurrency.HasValue() {
                used = true
                err = m.CommCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 497:
            if !m.FundRenewWaiv.HasValue() {
                used = true
                err = m.FundRenewWaiv.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 153:
            if !m.AllocAvgPx.HasValue() {
                used = true
                err = m.AllocAvgPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 154:
            if !m.AllocNetMoney.HasValue() {
                used = true
                err = m.AllocNetMoney.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 119:
            if !m.SettlCurrAmt.HasValue() {
                used = true
                err = m.SettlCurrAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 737:
            if !m.AllocSettlCurrAmt.HasValue() {
                used = true
                err = m.AllocSettlCurrAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 120:
            if !m.SettlCurrency.HasValue() {
                used = true
                err = m.SettlCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 736:
            if !m.AllocSettlCurrency.HasValue() {
                used = true
                err = m.AllocSettlCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 155:
            if !m.SettlCurrFxRate.HasValue() {
                used = true
                err = m.SettlCurrFxRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 156:
            if !m.SettlCurrFxRateCalc.HasValue() {
                used = true
                err = m.SettlCurrFxRateCalc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 742:
            if !m.AllocAccruedInterestAmt.HasValue() {
                used = true
                err = m.AllocAccruedInterestAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 741:
            if !m.AllocInterestAtMaturity.HasValue() {
                used = true
                err = m.AllocInterestAtMaturity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 136:
            // This counter (NoMiscFees) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.MiscFees = make([]MiscFeesGrp_MiscFees, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.MiscFees[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 576:
            // This counter (NoClearingInstructions) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.ClearingInstructions = make([]ClrInstGrp_ClearingInstructions, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.ClearingInstructions[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 780:
            if !m.AllocSettlInstType.HasValue() {
                used = true
                err = m.AllocSettlInstType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 172:
            if !m.SettlDeliveryType.HasValue() {
                used = true
                err = m.SettlDeliveryType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 169:
            if !m.StandInstDbType.HasValue() {
                used = true
                err = m.StandInstDbType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 170:
            if !m.StandInstDbName.HasValue() {
                used = true
                err = m.StandInstDbName.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 171:
            if !m.StandInstDbID.HasValue() {
                used = true
                err = m.StandInstDbID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 85:
            // This counter (NoDlvyInst) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.DlvyInst = make([]DlvyInstGrp_DlvyInst, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.DlvyInst[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 989:
            if !m.SecondaryIndividualAllocID.HasValue() {
                used = true
                err = m.SecondaryIndividualAllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1002:
            if !m.AllocMethod.HasValue() {
                used = true
                err = m.AllocMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 993:
            if !m.AllocCustomerCapacity.HasValue() {
                used = true
                err = m.AllocCustomerCapacity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 992:
            if !m.IndividualAllocType.HasValue() {
                used = true
                err = m.IndividualAllocType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1047:
            if !m.AllocPositionEffect.HasValue() {
                used = true
                err = m.AllocPositionEffect.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 635:
            if !m.ClearingFeeIndicator.HasValue() {
                used = true
                err = m.ClearingFeeIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


