package SideCrossOrdCxlGrp_Sides

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import Parties_PartyIDs "grgrbll/fix/Shared/Parties_PartyIDs"


func (m *SideCrossOrdCxlGrp_Sides) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.Side.HasValue() {
        (*res).WriteString("54=")
        val, err := m.Side.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigClOrdID.HasValue() {
        (*res).WriteString("41=")
        val, err := m.OrigClOrdID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ClOrdID.HasValue() {
        (*res).WriteString("11=")
        val, err := m.ClOrdID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryClOrdID.HasValue() {
        (*res).WriteString("526=")
        val, err := m.SecondaryClOrdID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ClOrdLinkID.HasValue() {
        (*res).WriteString("583=")
        val, err := m.ClOrdLinkID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigOrdModTime.HasValue() {
        (*res).WriteString("586=")
        val, err := m.OrigOrdModTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PartyIDs) > 0 {
    
    (*res).WriteString("453=")
    (*res).WriteString(strconv.Itoa(len(m.PartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.PartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.TradeOriginationDate.HasValue() {
        (*res).WriteString("229=")
        val, err := m.TradeOriginationDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeDate.HasValue() {
        (*res).WriteString("75=")
        val, err := m.TradeDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrderQty.HasValue() {
        (*res).WriteString("38=")
        val, err := m.OrderQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CashOrderQty.HasValue() {
        (*res).WriteString("152=")
        val, err := m.CashOrderQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrderPercent.HasValue() {
        (*res).WriteString("516=")
        val, err := m.OrderPercent.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RoundingDirection.HasValue() {
        (*res).WriteString("468=")
        val, err := m.RoundingDirection.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RoundingModulus.HasValue() {
        (*res).WriteString("469=")
        val, err := m.RoundingModulus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ComplianceID.HasValue() {
        (*res).WriteString("376=")
        val, err := m.ComplianceID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Text.HasValue() {
        (*res).WriteString("58=")
        val, err := m.Text.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedTextLen.HasValue() {
        (*res).WriteString("354=")
        val, err := m.EncodedTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedText.HasValue() {
        (*res).WriteString("355=")
        val, err := m.EncodedText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *SideCrossOrdCxlGrp_Sides) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message SideCrossOrdCxlGrp_Sides (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *SideCrossOrdCxlGrp_Sides) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 54:
            if !m.Side.HasValue() {
                used = true
                err = m.Side.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 41:
            if !m.OrigClOrdID.HasValue() {
                used = true
                err = m.OrigClOrdID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 11:
            if !m.ClOrdID.HasValue() {
                used = true
                err = m.ClOrdID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 526:
            if !m.SecondaryClOrdID.HasValue() {
                used = true
                err = m.SecondaryClOrdID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 583:
            if !m.ClOrdLinkID.HasValue() {
                used = true
                err = m.ClOrdLinkID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 586:
            if !m.OrigOrdModTime.HasValue() {
                used = true
                err = m.OrigOrdModTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 453:
            // This counter (NoPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PartyIDs = make([]Parties_PartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 229:
            if !m.TradeOriginationDate.HasValue() {
                used = true
                err = m.TradeOriginationDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 75:
            if !m.TradeDate.HasValue() {
                used = true
                err = m.TradeDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 38:
            if !m.OrderQty.HasValue() {
                used = true
                err = m.OrderQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 152:
            if !m.CashOrderQty.HasValue() {
                used = true
                err = m.CashOrderQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 516:
            if !m.OrderPercent.HasValue() {
                used = true
                err = m.OrderPercent.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 468:
            if !m.RoundingDirection.HasValue() {
                used = true
                err = m.RoundingDirection.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 469:
            if !m.RoundingModulus.HasValue() {
                used = true
                err = m.RoundingModulus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 376:
            if !m.ComplianceID.HasValue() {
                used = true
                err = m.ComplianceID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 58:
            if !m.Text.HasValue() {
                used = true
                err = m.Text.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 354:
            if !m.EncodedTextLen.HasValue() {
                used = true
                err = m.EncodedTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 355:
            if !m.EncodedText.HasValue() {
                used = true
                err = m.EncodedText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


