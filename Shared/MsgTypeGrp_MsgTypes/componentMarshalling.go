package MsgTypeGrp_MsgTypes

import "bufio"
import "strconv"
import "grgrbll/Fix/FixDef/Types"
import "fmt"

// Autogenerated at , do not edit




func (m *MsgTypeGrp_MsgTypes) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.RefMsgType.HasValue() {
        (*res).WriteString("372=")
        val, err := m.RefMsgType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgDirection.HasValue() {
        (*res).WriteString("385=")
        val, err := m.MsgDirection.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RefApplVerID.HasValue() {
        (*res).WriteString("1130=")
        val, err := m.RefApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RefCstmApplVerID.HasValue() {
        (*res).WriteString("1131=")
        val, err := m.RefCstmApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *MsgTypeGrp_MsgTypes) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message MsgTypeGrp_MsgTypes (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *MsgTypeGrp_MsgTypes) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 372:
            if !m.RefMsgType.HasValue() {
                used = true
                err = m.RefMsgType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 385:
            if !m.MsgDirection.HasValue() {
                used = true
                err = m.MsgDirection.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1130:
            if !m.RefApplVerID.HasValue() {
                used = true
                err = m.RefApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1131:
            if !m.RefCstmApplVerID.HasValue() {
                used = true
                err = m.RefCstmApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


