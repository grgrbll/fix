package AllocationInstructionAlert

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import HopGrp_Hops "grgrbll/fix/Shared/HopGrp_Hops"

import OrdAllocGrp_Orders "grgrbll/fix/Shared/OrdAllocGrp_Orders"

import ExecAllocGrp_Execs "grgrbll/fix/Shared/ExecAllocGrp_Execs"

import SecAltIDGrp_SecurityAltID "grgrbll/fix/Shared/SecAltIDGrp_SecurityAltID"

import EvntGrp_Events "grgrbll/fix/Shared/EvntGrp_Events"

import InstrumentParties_InstrumentParties "grgrbll/fix/Shared/InstrumentParties_InstrumentParties"

import AttrbGrp_InstrAttrib "grgrbll/fix/Shared/AttrbGrp_InstrAttrib"

import UndInstrmtGrp_Underlyings "grgrbll/fix/Shared/UndInstrmtGrp_Underlyings"

import InstrmtLegGrp_Legs "grgrbll/fix/Shared/InstrmtLegGrp_Legs"

import Parties_PartyIDs "grgrbll/fix/Shared/Parties_PartyIDs"

import Stipulations_Stipulations "grgrbll/fix/Shared/Stipulations_Stipulations"

import PositionAmountData_PosAmt "grgrbll/fix/Shared/PositionAmountData_PosAmt"

import AllocGrp_Allocs "grgrbll/fix/Shared/AllocGrp_Allocs"


func (m *AllocationInstructionAlert) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.BeginString.HasValue() {
        (*res).WriteString("8=")
        val, err := m.BeginString.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BodyLength.HasValue() {
        (*res).WriteString("9=")
        val, err := m.BodyLength.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgType.HasValue() {
        (*res).WriteString("35=")
        val, err := m.MsgType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderCompID.HasValue() {
        (*res).WriteString("49=")
        val, err := m.SenderCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetCompID.HasValue() {
        (*res).WriteString("56=")
        val, err := m.TargetCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfCompID.HasValue() {
        (*res).WriteString("115=")
        val, err := m.OnBehalfOfCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToCompID.HasValue() {
        (*res).WriteString("128=")
        val, err := m.DeliverToCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecureDataLen.HasValue() {
        (*res).WriteString("90=")
        val, err := m.SecureDataLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecureData.HasValue() {
        (*res).WriteString("91=")
        val, err := m.SecureData.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgSeqNum.HasValue() {
        (*res).WriteString("34=")
        val, err := m.MsgSeqNum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderSubID.HasValue() {
        (*res).WriteString("50=")
        val, err := m.SenderSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderLocationID.HasValue() {
        (*res).WriteString("142=")
        val, err := m.SenderLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetSubID.HasValue() {
        (*res).WriteString("57=")
        val, err := m.TargetSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetLocationID.HasValue() {
        (*res).WriteString("143=")
        val, err := m.TargetLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfSubID.HasValue() {
        (*res).WriteString("116=")
        val, err := m.OnBehalfOfSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfLocationID.HasValue() {
        (*res).WriteString("144=")
        val, err := m.OnBehalfOfLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToSubID.HasValue() {
        (*res).WriteString("129=")
        val, err := m.DeliverToSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToLocationID.HasValue() {
        (*res).WriteString("145=")
        val, err := m.DeliverToLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PossDupFlag.HasValue() {
        (*res).WriteString("43=")
        val, err := m.PossDupFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PossResend.HasValue() {
        (*res).WriteString("97=")
        val, err := m.PossResend.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SendingTime.HasValue() {
        (*res).WriteString("52=")
        val, err := m.SendingTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigSendingTime.HasValue() {
        (*res).WriteString("122=")
        val, err := m.OrigSendingTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.XmlDataLen.HasValue() {
        (*res).WriteString("212=")
        val, err := m.XmlDataLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.XmlData.HasValue() {
        (*res).WriteString("213=")
        val, err := m.XmlData.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MessageEncoding.HasValue() {
        (*res).WriteString("347=")
        val, err := m.MessageEncoding.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastMsgSeqNumProcessed.HasValue() {
        (*res).WriteString("369=")
        val, err := m.LastMsgSeqNumProcessed.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Hops) > 0 {
    
    (*res).WriteString("627=")
    (*res).WriteString(strconv.Itoa(len(m.Hops)))
    (*res).WriteString("\x01")
    for _, g := range m.Hops {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.ApplVerID.HasValue() {
        (*res).WriteString("1128=")
        val, err := m.ApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CstmApplVerID.HasValue() {
        (*res).WriteString("1129=")
        val, err := m.CstmApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocID.HasValue() {
        (*res).WriteString("70=")
        val, err := m.AllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocTransType.HasValue() {
        (*res).WriteString("71=")
        val, err := m.AllocTransType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocType.HasValue() {
        (*res).WriteString("626=")
        val, err := m.AllocType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryAllocID.HasValue() {
        (*res).WriteString("793=")
        val, err := m.SecondaryAllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RefAllocID.HasValue() {
        (*res).WriteString("72=")
        val, err := m.RefAllocID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocCancReplaceReason.HasValue() {
        (*res).WriteString("796=")
        val, err := m.AllocCancReplaceReason.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocIntermedReqType.HasValue() {
        (*res).WriteString("808=")
        val, err := m.AllocIntermedReqType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocLinkID.HasValue() {
        (*res).WriteString("196=")
        val, err := m.AllocLinkID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocLinkType.HasValue() {
        (*res).WriteString("197=")
        val, err := m.AllocLinkType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BookingRefID.HasValue() {
        (*res).WriteString("466=")
        val, err := m.BookingRefID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AllocNoOrdersType.HasValue() {
        (*res).WriteString("857=")
        val, err := m.AllocNoOrdersType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Orders) > 0 {
    
    (*res).WriteString("73=")
    (*res).WriteString(strconv.Itoa(len(m.Orders)))
    (*res).WriteString("\x01")
    for _, g := range m.Orders {
        err = g.MarshalFIX(res)
    }
    }
    
    
    (*res).WriteString("124=")
    (*res).WriteString(strconv.Itoa(len(m.Execs)))
    (*res).WriteString("\x01")
    for _, g := range m.Execs {
        err = g.MarshalFIX(res)
    }
    
    if m.PreviouslyReported.HasValue() {
        (*res).WriteString("570=")
        val, err := m.PreviouslyReported.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ReversalIndicator.HasValue() {
        (*res).WriteString("700=")
        val, err := m.ReversalIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MatchType.HasValue() {
        (*res).WriteString("574=")
        val, err := m.MatchType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Side.HasValue() {
        (*res).WriteString("54=")
        val, err := m.Side.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Symbol.HasValue() {
        (*res).WriteString("55=")
        val, err := m.Symbol.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SymbolSfx.HasValue() {
        (*res).WriteString("65=")
        val, err := m.SymbolSfx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityID.HasValue() {
        (*res).WriteString("48=")
        val, err := m.SecurityID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityIDSource.HasValue() {
        (*res).WriteString("22=")
        val, err := m.SecurityIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.SecurityAltID) > 0 {
    
    (*res).WriteString("454=")
    (*res).WriteString(strconv.Itoa(len(m.SecurityAltID)))
    (*res).WriteString("\x01")
    for _, g := range m.SecurityAltID {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.Product.HasValue() {
        (*res).WriteString("460=")
        val, err := m.Product.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CFICode.HasValue() {
        (*res).WriteString("461=")
        val, err := m.CFICode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityType.HasValue() {
        (*res).WriteString("167=")
        val, err := m.SecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecuritySubType.HasValue() {
        (*res).WriteString("762=")
        val, err := m.SecuritySubType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityMonthYear.HasValue() {
        (*res).WriteString("200=")
        val, err := m.MaturityMonthYear.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityDate.HasValue() {
        (*res).WriteString("541=")
        val, err := m.MaturityDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CouponPaymentDate.HasValue() {
        (*res).WriteString("224=")
        val, err := m.CouponPaymentDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IssueDate.HasValue() {
        (*res).WriteString("225=")
        val, err := m.IssueDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepoCollateralSecurityType.HasValue() {
        (*res).WriteString("239=")
        val, err := m.RepoCollateralSecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepurchaseTerm.HasValue() {
        (*res).WriteString("226=")
        val, err := m.RepurchaseTerm.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepurchaseRate.HasValue() {
        (*res).WriteString("227=")
        val, err := m.RepurchaseRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Factor.HasValue() {
        (*res).WriteString("228=")
        val, err := m.Factor.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CreditRating.HasValue() {
        (*res).WriteString("255=")
        val, err := m.CreditRating.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InstrRegistry.HasValue() {
        (*res).WriteString("543=")
        val, err := m.InstrRegistry.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CountryOfIssue.HasValue() {
        (*res).WriteString("470=")
        val, err := m.CountryOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StateOrProvinceOfIssue.HasValue() {
        (*res).WriteString("471=")
        val, err := m.StateOrProvinceOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LocaleOfIssue.HasValue() {
        (*res).WriteString("472=")
        val, err := m.LocaleOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RedemptionDate.HasValue() {
        (*res).WriteString("240=")
        val, err := m.RedemptionDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikePrice.HasValue() {
        (*res).WriteString("202=")
        val, err := m.StrikePrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeCurrency.HasValue() {
        (*res).WriteString("947=")
        val, err := m.StrikeCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OptAttribute.HasValue() {
        (*res).WriteString("206=")
        val, err := m.OptAttribute.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ContractMultiplier.HasValue() {
        (*res).WriteString("231=")
        val, err := m.ContractMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CouponRate.HasValue() {
        (*res).WriteString("223=")
        val, err := m.CouponRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityExchange.HasValue() {
        (*res).WriteString("207=")
        val, err := m.SecurityExchange.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Issuer.HasValue() {
        (*res).WriteString("106=")
        val, err := m.Issuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedIssuerLen.HasValue() {
        (*res).WriteString("348=")
        val, err := m.EncodedIssuerLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedIssuer.HasValue() {
        (*res).WriteString("349=")
        val, err := m.EncodedIssuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityDesc.HasValue() {
        (*res).WriteString("107=")
        val, err := m.SecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedSecurityDescLen.HasValue() {
        (*res).WriteString("350=")
        val, err := m.EncodedSecurityDescLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedSecurityDesc.HasValue() {
        (*res).WriteString("351=")
        val, err := m.EncodedSecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Pool.HasValue() {
        (*res).WriteString("691=")
        val, err := m.Pool.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ContractSettlMonth.HasValue() {
        (*res).WriteString("667=")
        val, err := m.ContractSettlMonth.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CPProgram.HasValue() {
        (*res).WriteString("875=")
        val, err := m.CPProgram.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CPRegType.HasValue() {
        (*res).WriteString("876=")
        val, err := m.CPRegType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Events) > 0 {
    
    (*res).WriteString("864=")
    (*res).WriteString(strconv.Itoa(len(m.Events)))
    (*res).WriteString("\x01")
    for _, g := range m.Events {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.DatedDate.HasValue() {
        (*res).WriteString("873=")
        val, err := m.DatedDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InterestAccrualDate.HasValue() {
        (*res).WriteString("874=")
        val, err := m.InterestAccrualDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityStatus.HasValue() {
        (*res).WriteString("965=")
        val, err := m.SecurityStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettleOnOpenFlag.HasValue() {
        (*res).WriteString("966=")
        val, err := m.SettleOnOpenFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InstrmtAssignmentMethod.HasValue() {
        (*res).WriteString("1049=")
        val, err := m.InstrmtAssignmentMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeMultiplier.HasValue() {
        (*res).WriteString("967=")
        val, err := m.StrikeMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeValue.HasValue() {
        (*res).WriteString("968=")
        val, err := m.StrikeValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MinPriceIncrement.HasValue() {
        (*res).WriteString("969=")
        val, err := m.MinPriceIncrement.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PositionLimit.HasValue() {
        (*res).WriteString("970=")
        val, err := m.PositionLimit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.NTPositionLimit.HasValue() {
        (*res).WriteString("971=")
        val, err := m.NTPositionLimit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.InstrumentParties) > 0 {
    
    (*res).WriteString("1018=")
    (*res).WriteString(strconv.Itoa(len(m.InstrumentParties)))
    (*res).WriteString("\x01")
    for _, g := range m.InstrumentParties {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.UnitofMeasure.HasValue() {
        (*res).WriteString("996=")
        val, err := m.UnitofMeasure.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TimeUnit.HasValue() {
        (*res).WriteString("997=")
        val, err := m.TimeUnit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityTime.HasValue() {
        (*res).WriteString("1079=")
        val, err := m.MaturityTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliveryForm.HasValue() {
        (*res).WriteString("668=")
        val, err := m.DeliveryForm.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PctAtRisk.HasValue() {
        (*res).WriteString("869=")
        val, err := m.PctAtRisk.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.InstrAttrib) > 0 {
    
    (*res).WriteString("870=")
    (*res).WriteString(strconv.Itoa(len(m.InstrAttrib)))
    (*res).WriteString("\x01")
    for _, g := range m.InstrAttrib {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.AgreementDesc.HasValue() {
        (*res).WriteString("913=")
        val, err := m.AgreementDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AgreementID.HasValue() {
        (*res).WriteString("914=")
        val, err := m.AgreementID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AgreementDate.HasValue() {
        (*res).WriteString("915=")
        val, err := m.AgreementDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AgreementCurrency.HasValue() {
        (*res).WriteString("918=")
        val, err := m.AgreementCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TerminationType.HasValue() {
        (*res).WriteString("788=")
        val, err := m.TerminationType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StartDate.HasValue() {
        (*res).WriteString("916=")
        val, err := m.StartDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EndDate.HasValue() {
        (*res).WriteString("917=")
        val, err := m.EndDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliveryType.HasValue() {
        (*res).WriteString("919=")
        val, err := m.DeliveryType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MarginRatio.HasValue() {
        (*res).WriteString("898=")
        val, err := m.MarginRatio.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Underlyings) > 0 {
    
    (*res).WriteString("711=")
    (*res).WriteString(strconv.Itoa(len(m.Underlyings)))
    (*res).WriteString("\x01")
    for _, g := range m.Underlyings {
        err = g.MarshalFIX(res)
    }
    }
    
    if len(m.Legs) > 0 {
    
    (*res).WriteString("555=")
    (*res).WriteString(strconv.Itoa(len(m.Legs)))
    (*res).WriteString("\x01")
    for _, g := range m.Legs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.Quantity.HasValue() {
        (*res).WriteString("53=")
        val, err := m.Quantity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.QtyType.HasValue() {
        (*res).WriteString("854=")
        val, err := m.QtyType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastMkt.HasValue() {
        (*res).WriteString("30=")
        val, err := m.LastMkt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeOriginationDate.HasValue() {
        (*res).WriteString("229=")
        val, err := m.TradeOriginationDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionID.HasValue() {
        (*res).WriteString("336=")
        val, err := m.TradingSessionID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionSubID.HasValue() {
        (*res).WriteString("625=")
        val, err := m.TradingSessionSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PriceType.HasValue() {
        (*res).WriteString("423=")
        val, err := m.PriceType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AvgPx.HasValue() {
        (*res).WriteString("6=")
        val, err := m.AvgPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AvgParPx.HasValue() {
        (*res).WriteString("860=")
        val, err := m.AvgParPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Spread.HasValue() {
        (*res).WriteString("218=")
        val, err := m.Spread.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkCurveCurrency.HasValue() {
        (*res).WriteString("220=")
        val, err := m.BenchmarkCurveCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkCurveName.HasValue() {
        (*res).WriteString("221=")
        val, err := m.BenchmarkCurveName.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkCurvePoint.HasValue() {
        (*res).WriteString("222=")
        val, err := m.BenchmarkCurvePoint.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkPrice.HasValue() {
        (*res).WriteString("662=")
        val, err := m.BenchmarkPrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkPriceType.HasValue() {
        (*res).WriteString("663=")
        val, err := m.BenchmarkPriceType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkSecurityID.HasValue() {
        (*res).WriteString("699=")
        val, err := m.BenchmarkSecurityID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BenchmarkSecurityIDSource.HasValue() {
        (*res).WriteString("761=")
        val, err := m.BenchmarkSecurityIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Currency.HasValue() {
        (*res).WriteString("15=")
        val, err := m.Currency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AvgPxPrecision.HasValue() {
        (*res).WriteString("74=")
        val, err := m.AvgPxPrecision.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PartyIDs) > 0 {
    
    (*res).WriteString("453=")
    (*res).WriteString(strconv.Itoa(len(m.PartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.PartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.TradeDate.HasValue() {
        (*res).WriteString("75=")
        val, err := m.TradeDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TransactTime.HasValue() {
        (*res).WriteString("60=")
        val, err := m.TransactTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlType.HasValue() {
        (*res).WriteString("63=")
        val, err := m.SettlType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlDate.HasValue() {
        (*res).WriteString("64=")
        val, err := m.SettlDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BookingType.HasValue() {
        (*res).WriteString("775=")
        val, err := m.BookingType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.GrossTradeAmt.HasValue() {
        (*res).WriteString("381=")
        val, err := m.GrossTradeAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Concession.HasValue() {
        (*res).WriteString("238=")
        val, err := m.Concession.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TotalTakedown.HasValue() {
        (*res).WriteString("237=")
        val, err := m.TotalTakedown.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.NetMoney.HasValue() {
        (*res).WriteString("118=")
        val, err := m.NetMoney.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PositionEffect.HasValue() {
        (*res).WriteString("77=")
        val, err := m.PositionEffect.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AutoAcceptIndicator.HasValue() {
        (*res).WriteString("754=")
        val, err := m.AutoAcceptIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Text.HasValue() {
        (*res).WriteString("58=")
        val, err := m.Text.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedTextLen.HasValue() {
        (*res).WriteString("354=")
        val, err := m.EncodedTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedText.HasValue() {
        (*res).WriteString("355=")
        val, err := m.EncodedText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.NumDaysInterest.HasValue() {
        (*res).WriteString("157=")
        val, err := m.NumDaysInterest.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AccruedInterestRate.HasValue() {
        (*res).WriteString("158=")
        val, err := m.AccruedInterestRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AccruedInterestAmt.HasValue() {
        (*res).WriteString("159=")
        val, err := m.AccruedInterestAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TotalAccruedInterestAmt.HasValue() {
        (*res).WriteString("540=")
        val, err := m.TotalAccruedInterestAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InterestAtMaturity.HasValue() {
        (*res).WriteString("738=")
        val, err := m.InterestAtMaturity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EndAccruedInterestAmt.HasValue() {
        (*res).WriteString("920=")
        val, err := m.EndAccruedInterestAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StartCash.HasValue() {
        (*res).WriteString("921=")
        val, err := m.StartCash.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EndCash.HasValue() {
        (*res).WriteString("922=")
        val, err := m.EndCash.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LegalConfirm.HasValue() {
        (*res).WriteString("650=")
        val, err := m.LegalConfirm.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Stipulations) > 0 {
    
    (*res).WriteString("232=")
    (*res).WriteString(strconv.Itoa(len(m.Stipulations)))
    (*res).WriteString("\x01")
    for _, g := range m.Stipulations {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.YieldType.HasValue() {
        (*res).WriteString("235=")
        val, err := m.YieldType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Yield.HasValue() {
        (*res).WriteString("236=")
        val, err := m.Yield.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.YieldCalcDate.HasValue() {
        (*res).WriteString("701=")
        val, err := m.YieldCalcDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.YieldRedemptionDate.HasValue() {
        (*res).WriteString("696=")
        val, err := m.YieldRedemptionDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.YieldRedemptionPrice.HasValue() {
        (*res).WriteString("697=")
        val, err := m.YieldRedemptionPrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.YieldRedemptionPriceType.HasValue() {
        (*res).WriteString("698=")
        val, err := m.YieldRedemptionPriceType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PosAmt) > 0 {
    
    (*res).WriteString("753=")
    (*res).WriteString(strconv.Itoa(len(m.PosAmt)))
    (*res).WriteString("\x01")
    for _, g := range m.PosAmt {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.TotNoAllocs.HasValue() {
        (*res).WriteString("892=")
        val, err := m.TotNoAllocs.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastFragment.HasValue() {
        (*res).WriteString("893=")
        val, err := m.LastFragment.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Allocs) > 0 {
    
    (*res).WriteString("78=")
    (*res).WriteString(strconv.Itoa(len(m.Allocs)))
    (*res).WriteString("\x01")
    for _, g := range m.Allocs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.AvgPxIndicator.HasValue() {
        (*res).WriteString("819=")
        val, err := m.AvgPxIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ClearingBusinessDate.HasValue() {
        (*res).WriteString("715=")
        val, err := m.ClearingBusinessDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TrdType.HasValue() {
        (*res).WriteString("828=")
        val, err := m.TrdType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TrdSubType.HasValue() {
        (*res).WriteString("829=")
        val, err := m.TrdSubType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CustOrderCapacity.HasValue() {
        (*res).WriteString("582=")
        val, err := m.CustOrderCapacity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeInputSource.HasValue() {
        (*res).WriteString("578=")
        val, err := m.TradeInputSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MultiLegReportingType.HasValue() {
        (*res).WriteString("442=")
        val, err := m.MultiLegReportingType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MessageEventSource.HasValue() {
        (*res).WriteString("1011=")
        val, err := m.MessageEventSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RndPx.HasValue() {
        (*res).WriteString("991=")
        val, err := m.RndPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SignatureLength.HasValue() {
        (*res).WriteString("93=")
        val, err := m.SignatureLength.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Signature.HasValue() {
        (*res).WriteString("89=")
        val, err := m.Signature.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CheckSum.HasValue() {
        (*res).WriteString("10=")
        val, err := m.CheckSum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *AllocationInstructionAlert) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message AllocationInstructionAlert (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *AllocationInstructionAlert) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 8:
            if !m.BeginString.HasValue() {
                used = true
                err = m.BeginString.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 9:
            if !m.BodyLength.HasValue() {
                used = true
                err = m.BodyLength.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 35:
            if !m.MsgType.HasValue() {
                used = true
                err = m.MsgType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 49:
            if !m.SenderCompID.HasValue() {
                used = true
                err = m.SenderCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 56:
            if !m.TargetCompID.HasValue() {
                used = true
                err = m.TargetCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 115:
            if !m.OnBehalfOfCompID.HasValue() {
                used = true
                err = m.OnBehalfOfCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 128:
            if !m.DeliverToCompID.HasValue() {
                used = true
                err = m.DeliverToCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 90:
            if !m.SecureDataLen.HasValue() {
                used = true
                err = m.SecureDataLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 91:
            if !m.SecureData.HasValue() {
                used = true
                err = m.SecureData.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 34:
            if !m.MsgSeqNum.HasValue() {
                used = true
                err = m.MsgSeqNum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 50:
            if !m.SenderSubID.HasValue() {
                used = true
                err = m.SenderSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 142:
            if !m.SenderLocationID.HasValue() {
                used = true
                err = m.SenderLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 57:
            if !m.TargetSubID.HasValue() {
                used = true
                err = m.TargetSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 143:
            if !m.TargetLocationID.HasValue() {
                used = true
                err = m.TargetLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 116:
            if !m.OnBehalfOfSubID.HasValue() {
                used = true
                err = m.OnBehalfOfSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 144:
            if !m.OnBehalfOfLocationID.HasValue() {
                used = true
                err = m.OnBehalfOfLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 129:
            if !m.DeliverToSubID.HasValue() {
                used = true
                err = m.DeliverToSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 145:
            if !m.DeliverToLocationID.HasValue() {
                used = true
                err = m.DeliverToLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 43:
            if !m.PossDupFlag.HasValue() {
                used = true
                err = m.PossDupFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 97:
            if !m.PossResend.HasValue() {
                used = true
                err = m.PossResend.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 52:
            if !m.SendingTime.HasValue() {
                used = true
                err = m.SendingTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 122:
            if !m.OrigSendingTime.HasValue() {
                used = true
                err = m.OrigSendingTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 212:
            if !m.XmlDataLen.HasValue() {
                used = true
                err = m.XmlDataLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 213:
            if !m.XmlData.HasValue() {
                used = true
                err = m.XmlData.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 347:
            if !m.MessageEncoding.HasValue() {
                used = true
                err = m.MessageEncoding.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 369:
            if !m.LastMsgSeqNumProcessed.HasValue() {
                used = true
                err = m.LastMsgSeqNumProcessed.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 627:
            // This counter (NoHops) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Hops = make([]HopGrp_Hops, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Hops[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1128:
            if !m.ApplVerID.HasValue() {
                used = true
                err = m.ApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1129:
            if !m.CstmApplVerID.HasValue() {
                used = true
                err = m.CstmApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 70:
            if !m.AllocID.HasValue() {
                used = true
                err = m.AllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 71:
            if !m.AllocTransType.HasValue() {
                used = true
                err = m.AllocTransType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 626:
            if !m.AllocType.HasValue() {
                used = true
                err = m.AllocType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 793:
            if !m.SecondaryAllocID.HasValue() {
                used = true
                err = m.SecondaryAllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 72:
            if !m.RefAllocID.HasValue() {
                used = true
                err = m.RefAllocID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 796:
            if !m.AllocCancReplaceReason.HasValue() {
                used = true
                err = m.AllocCancReplaceReason.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 808:
            if !m.AllocIntermedReqType.HasValue() {
                used = true
                err = m.AllocIntermedReqType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 196:
            if !m.AllocLinkID.HasValue() {
                used = true
                err = m.AllocLinkID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 197:
            if !m.AllocLinkType.HasValue() {
                used = true
                err = m.AllocLinkType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 466:
            if !m.BookingRefID.HasValue() {
                used = true
                err = m.BookingRefID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 857:
            if !m.AllocNoOrdersType.HasValue() {
                used = true
                err = m.AllocNoOrdersType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 73:
            // This counter (NoOrders) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Orders = make([]OrdAllocGrp_Orders, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Orders[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 124:
            // This counter (NoExecs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Execs = make([]ExecAllocGrp_Execs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Execs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 570:
            if !m.PreviouslyReported.HasValue() {
                used = true
                err = m.PreviouslyReported.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 700:
            if !m.ReversalIndicator.HasValue() {
                used = true
                err = m.ReversalIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 574:
            if !m.MatchType.HasValue() {
                used = true
                err = m.MatchType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 54:
            if !m.Side.HasValue() {
                used = true
                err = m.Side.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 55:
            if !m.Symbol.HasValue() {
                used = true
                err = m.Symbol.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 65:
            if !m.SymbolSfx.HasValue() {
                used = true
                err = m.SymbolSfx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 48:
            if !m.SecurityID.HasValue() {
                used = true
                err = m.SecurityID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 22:
            if !m.SecurityIDSource.HasValue() {
                used = true
                err = m.SecurityIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 454:
            // This counter (NoSecurityAltID) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.SecurityAltID = make([]SecAltIDGrp_SecurityAltID, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.SecurityAltID[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 460:
            if !m.Product.HasValue() {
                used = true
                err = m.Product.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 461:
            if !m.CFICode.HasValue() {
                used = true
                err = m.CFICode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 167:
            if !m.SecurityType.HasValue() {
                used = true
                err = m.SecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 762:
            if !m.SecuritySubType.HasValue() {
                used = true
                err = m.SecuritySubType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 200:
            if !m.MaturityMonthYear.HasValue() {
                used = true
                err = m.MaturityMonthYear.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 541:
            if !m.MaturityDate.HasValue() {
                used = true
                err = m.MaturityDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 224:
            if !m.CouponPaymentDate.HasValue() {
                used = true
                err = m.CouponPaymentDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 225:
            if !m.IssueDate.HasValue() {
                used = true
                err = m.IssueDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 239:
            if !m.RepoCollateralSecurityType.HasValue() {
                used = true
                err = m.RepoCollateralSecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 226:
            if !m.RepurchaseTerm.HasValue() {
                used = true
                err = m.RepurchaseTerm.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 227:
            if !m.RepurchaseRate.HasValue() {
                used = true
                err = m.RepurchaseRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 228:
            if !m.Factor.HasValue() {
                used = true
                err = m.Factor.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 255:
            if !m.CreditRating.HasValue() {
                used = true
                err = m.CreditRating.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 543:
            if !m.InstrRegistry.HasValue() {
                used = true
                err = m.InstrRegistry.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 470:
            if !m.CountryOfIssue.HasValue() {
                used = true
                err = m.CountryOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 471:
            if !m.StateOrProvinceOfIssue.HasValue() {
                used = true
                err = m.StateOrProvinceOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 472:
            if !m.LocaleOfIssue.HasValue() {
                used = true
                err = m.LocaleOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 240:
            if !m.RedemptionDate.HasValue() {
                used = true
                err = m.RedemptionDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 202:
            if !m.StrikePrice.HasValue() {
                used = true
                err = m.StrikePrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 947:
            if !m.StrikeCurrency.HasValue() {
                used = true
                err = m.StrikeCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 206:
            if !m.OptAttribute.HasValue() {
                used = true
                err = m.OptAttribute.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 231:
            if !m.ContractMultiplier.HasValue() {
                used = true
                err = m.ContractMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 223:
            if !m.CouponRate.HasValue() {
                used = true
                err = m.CouponRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 207:
            if !m.SecurityExchange.HasValue() {
                used = true
                err = m.SecurityExchange.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 106:
            if !m.Issuer.HasValue() {
                used = true
                err = m.Issuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 348:
            if !m.EncodedIssuerLen.HasValue() {
                used = true
                err = m.EncodedIssuerLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 349:
            if !m.EncodedIssuer.HasValue() {
                used = true
                err = m.EncodedIssuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 107:
            if !m.SecurityDesc.HasValue() {
                used = true
                err = m.SecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 350:
            if !m.EncodedSecurityDescLen.HasValue() {
                used = true
                err = m.EncodedSecurityDescLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 351:
            if !m.EncodedSecurityDesc.HasValue() {
                used = true
                err = m.EncodedSecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 691:
            if !m.Pool.HasValue() {
                used = true
                err = m.Pool.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 667:
            if !m.ContractSettlMonth.HasValue() {
                used = true
                err = m.ContractSettlMonth.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 875:
            if !m.CPProgram.HasValue() {
                used = true
                err = m.CPProgram.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 876:
            if !m.CPRegType.HasValue() {
                used = true
                err = m.CPRegType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 864:
            // This counter (NoEvents) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Events = make([]EvntGrp_Events, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Events[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 873:
            if !m.DatedDate.HasValue() {
                used = true
                err = m.DatedDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 874:
            if !m.InterestAccrualDate.HasValue() {
                used = true
                err = m.InterestAccrualDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 965:
            if !m.SecurityStatus.HasValue() {
                used = true
                err = m.SecurityStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 966:
            if !m.SettleOnOpenFlag.HasValue() {
                used = true
                err = m.SettleOnOpenFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1049:
            if !m.InstrmtAssignmentMethod.HasValue() {
                used = true
                err = m.InstrmtAssignmentMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 967:
            if !m.StrikeMultiplier.HasValue() {
                used = true
                err = m.StrikeMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 968:
            if !m.StrikeValue.HasValue() {
                used = true
                err = m.StrikeValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 969:
            if !m.MinPriceIncrement.HasValue() {
                used = true
                err = m.MinPriceIncrement.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 970:
            if !m.PositionLimit.HasValue() {
                used = true
                err = m.PositionLimit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 971:
            if !m.NTPositionLimit.HasValue() {
                used = true
                err = m.NTPositionLimit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1018:
            // This counter (NoInstrumentParties) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.InstrumentParties = make([]InstrumentParties_InstrumentParties, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.InstrumentParties[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 996:
            if !m.UnitofMeasure.HasValue() {
                used = true
                err = m.UnitofMeasure.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 997:
            if !m.TimeUnit.HasValue() {
                used = true
                err = m.TimeUnit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1079:
            if !m.MaturityTime.HasValue() {
                used = true
                err = m.MaturityTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 668:
            if !m.DeliveryForm.HasValue() {
                used = true
                err = m.DeliveryForm.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 869:
            if !m.PctAtRisk.HasValue() {
                used = true
                err = m.PctAtRisk.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 870:
            // This counter (NoInstrAttrib) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.InstrAttrib = make([]AttrbGrp_InstrAttrib, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.InstrAttrib[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 913:
            if !m.AgreementDesc.HasValue() {
                used = true
                err = m.AgreementDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 914:
            if !m.AgreementID.HasValue() {
                used = true
                err = m.AgreementID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 915:
            if !m.AgreementDate.HasValue() {
                used = true
                err = m.AgreementDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 918:
            if !m.AgreementCurrency.HasValue() {
                used = true
                err = m.AgreementCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 788:
            if !m.TerminationType.HasValue() {
                used = true
                err = m.TerminationType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 916:
            if !m.StartDate.HasValue() {
                used = true
                err = m.StartDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 917:
            if !m.EndDate.HasValue() {
                used = true
                err = m.EndDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 919:
            if !m.DeliveryType.HasValue() {
                used = true
                err = m.DeliveryType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 898:
            if !m.MarginRatio.HasValue() {
                used = true
                err = m.MarginRatio.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 711:
            // This counter (NoUnderlyings) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Underlyings = make([]UndInstrmtGrp_Underlyings, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Underlyings[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 555:
            // This counter (NoLegs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Legs = make([]InstrmtLegGrp_Legs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Legs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 53:
            if !m.Quantity.HasValue() {
                used = true
                err = m.Quantity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 854:
            if !m.QtyType.HasValue() {
                used = true
                err = m.QtyType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 30:
            if !m.LastMkt.HasValue() {
                used = true
                err = m.LastMkt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 229:
            if !m.TradeOriginationDate.HasValue() {
                used = true
                err = m.TradeOriginationDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 336:
            if !m.TradingSessionID.HasValue() {
                used = true
                err = m.TradingSessionID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 625:
            if !m.TradingSessionSubID.HasValue() {
                used = true
                err = m.TradingSessionSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 423:
            if !m.PriceType.HasValue() {
                used = true
                err = m.PriceType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 6:
            if !m.AvgPx.HasValue() {
                used = true
                err = m.AvgPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 860:
            if !m.AvgParPx.HasValue() {
                used = true
                err = m.AvgParPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 218:
            if !m.Spread.HasValue() {
                used = true
                err = m.Spread.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 220:
            if !m.BenchmarkCurveCurrency.HasValue() {
                used = true
                err = m.BenchmarkCurveCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 221:
            if !m.BenchmarkCurveName.HasValue() {
                used = true
                err = m.BenchmarkCurveName.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 222:
            if !m.BenchmarkCurvePoint.HasValue() {
                used = true
                err = m.BenchmarkCurvePoint.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 662:
            if !m.BenchmarkPrice.HasValue() {
                used = true
                err = m.BenchmarkPrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 663:
            if !m.BenchmarkPriceType.HasValue() {
                used = true
                err = m.BenchmarkPriceType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 699:
            if !m.BenchmarkSecurityID.HasValue() {
                used = true
                err = m.BenchmarkSecurityID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 761:
            if !m.BenchmarkSecurityIDSource.HasValue() {
                used = true
                err = m.BenchmarkSecurityIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 15:
            if !m.Currency.HasValue() {
                used = true
                err = m.Currency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 74:
            if !m.AvgPxPrecision.HasValue() {
                used = true
                err = m.AvgPxPrecision.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 453:
            // This counter (NoPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PartyIDs = make([]Parties_PartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 75:
            if !m.TradeDate.HasValue() {
                used = true
                err = m.TradeDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 60:
            if !m.TransactTime.HasValue() {
                used = true
                err = m.TransactTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 63:
            if !m.SettlType.HasValue() {
                used = true
                err = m.SettlType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 64:
            if !m.SettlDate.HasValue() {
                used = true
                err = m.SettlDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 775:
            if !m.BookingType.HasValue() {
                used = true
                err = m.BookingType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 381:
            if !m.GrossTradeAmt.HasValue() {
                used = true
                err = m.GrossTradeAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 238:
            if !m.Concession.HasValue() {
                used = true
                err = m.Concession.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 237:
            if !m.TotalTakedown.HasValue() {
                used = true
                err = m.TotalTakedown.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 118:
            if !m.NetMoney.HasValue() {
                used = true
                err = m.NetMoney.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 77:
            if !m.PositionEffect.HasValue() {
                used = true
                err = m.PositionEffect.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 754:
            if !m.AutoAcceptIndicator.HasValue() {
                used = true
                err = m.AutoAcceptIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 58:
            if !m.Text.HasValue() {
                used = true
                err = m.Text.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 354:
            if !m.EncodedTextLen.HasValue() {
                used = true
                err = m.EncodedTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 355:
            if !m.EncodedText.HasValue() {
                used = true
                err = m.EncodedText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 157:
            if !m.NumDaysInterest.HasValue() {
                used = true
                err = m.NumDaysInterest.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 158:
            if !m.AccruedInterestRate.HasValue() {
                used = true
                err = m.AccruedInterestRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 159:
            if !m.AccruedInterestAmt.HasValue() {
                used = true
                err = m.AccruedInterestAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 540:
            if !m.TotalAccruedInterestAmt.HasValue() {
                used = true
                err = m.TotalAccruedInterestAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 738:
            if !m.InterestAtMaturity.HasValue() {
                used = true
                err = m.InterestAtMaturity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 920:
            if !m.EndAccruedInterestAmt.HasValue() {
                used = true
                err = m.EndAccruedInterestAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 921:
            if !m.StartCash.HasValue() {
                used = true
                err = m.StartCash.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 922:
            if !m.EndCash.HasValue() {
                used = true
                err = m.EndCash.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 650:
            if !m.LegalConfirm.HasValue() {
                used = true
                err = m.LegalConfirm.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 232:
            // This counter (NoStipulations) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Stipulations = make([]Stipulations_Stipulations, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Stipulations[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 235:
            if !m.YieldType.HasValue() {
                used = true
                err = m.YieldType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 236:
            if !m.Yield.HasValue() {
                used = true
                err = m.Yield.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 701:
            if !m.YieldCalcDate.HasValue() {
                used = true
                err = m.YieldCalcDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 696:
            if !m.YieldRedemptionDate.HasValue() {
                used = true
                err = m.YieldRedemptionDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 697:
            if !m.YieldRedemptionPrice.HasValue() {
                used = true
                err = m.YieldRedemptionPrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 698:
            if !m.YieldRedemptionPriceType.HasValue() {
                used = true
                err = m.YieldRedemptionPriceType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 753:
            // This counter (NoPosAmt) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PosAmt = make([]PositionAmountData_PosAmt, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PosAmt[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 892:
            if !m.TotNoAllocs.HasValue() {
                used = true
                err = m.TotNoAllocs.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 893:
            if !m.LastFragment.HasValue() {
                used = true
                err = m.LastFragment.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 78:
            // This counter (NoAllocs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Allocs = make([]AllocGrp_Allocs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Allocs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 819:
            if !m.AvgPxIndicator.HasValue() {
                used = true
                err = m.AvgPxIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 715:
            if !m.ClearingBusinessDate.HasValue() {
                used = true
                err = m.ClearingBusinessDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 828:
            if !m.TrdType.HasValue() {
                used = true
                err = m.TrdType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 829:
            if !m.TrdSubType.HasValue() {
                used = true
                err = m.TrdSubType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 582:
            if !m.CustOrderCapacity.HasValue() {
                used = true
                err = m.CustOrderCapacity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 578:
            if !m.TradeInputSource.HasValue() {
                used = true
                err = m.TradeInputSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 442:
            if !m.MultiLegReportingType.HasValue() {
                used = true
                err = m.MultiLegReportingType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1011:
            if !m.MessageEventSource.HasValue() {
                used = true
                err = m.MessageEventSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 991:
            if !m.RndPx.HasValue() {
                used = true
                err = m.RndPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 93:
            if !m.SignatureLength.HasValue() {
                used = true
                err = m.SignatureLength.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 89:
            if !m.Signature.HasValue() {
                used = true
                err = m.Signature.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 10:
            if !m.CheckSum.HasValue() {
                used = true
                err = m.CheckSum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


