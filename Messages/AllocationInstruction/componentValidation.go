package AllocationInstruction

import "bufio"
import "regexp"

// Autogenerated at , do not edit



import HopGrp_Hops "grgrbll/fix/Shared/HopGrp_Hops"

import OrdAllocGrp_Orders "grgrbll/fix/Shared/OrdAllocGrp_Orders"

import ExecAllocGrp_Execs "grgrbll/fix/Shared/ExecAllocGrp_Execs"

import SecAltIDGrp_SecurityAltID "grgrbll/fix/Shared/SecAltIDGrp_SecurityAltID"

import EvntGrp_Events "grgrbll/fix/Shared/EvntGrp_Events"

import InstrumentParties_InstrumentParties "grgrbll/fix/Shared/InstrumentParties_InstrumentParties"

import AttrbGrp_InstrAttrib "grgrbll/fix/Shared/AttrbGrp_InstrAttrib"

import UndInstrmtGrp_Underlyings "grgrbll/fix/Shared/UndInstrmtGrp_Underlyings"

import InstrmtLegGrp_Legs "grgrbll/fix/Shared/InstrmtLegGrp_Legs"

import Parties_PartyIDs "grgrbll/fix/Shared/Parties_PartyIDs"

import Stipulations_Stipulations "grgrbll/fix/Shared/Stipulations_Stipulations"

import AllocGrp_Allocs "grgrbll/fix/Shared/AllocGrp_Allocs"

import PositionAmountData_PosAmt "grgrbll/fix/Shared/PositionAmountData_PosAmt"


type allocationInstruction_RegexValidator struct {
    BeginString *(regexp.Regexp)
    BodyLength *(regexp.Regexp)
    MsgType *(regexp.Regexp)
    SenderCompID *(regexp.Regexp)
    TargetCompID *(regexp.Regexp)
    OnBehalfOfCompID *(regexp.Regexp)
    DeliverToCompID *(regexp.Regexp)
    SecureDataLen *(regexp.Regexp)
    SecureData *(regexp.Regexp)
    MsgSeqNum *(regexp.Regexp)
    SenderSubID *(regexp.Regexp)
    SenderLocationID *(regexp.Regexp)
    TargetSubID *(regexp.Regexp)
    TargetLocationID *(regexp.Regexp)
    OnBehalfOfSubID *(regexp.Regexp)
    OnBehalfOfLocationID *(regexp.Regexp)
    DeliverToSubID *(regexp.Regexp)
    DeliverToLocationID *(regexp.Regexp)
    PossDupFlag *(regexp.Regexp)
    PossResend *(regexp.Regexp)
    SendingTime *(regexp.Regexp)
    OrigSendingTime *(regexp.Regexp)
    XmlDataLen *(regexp.Regexp)
    XmlData *(regexp.Regexp)
    MessageEncoding *(regexp.Regexp)
    LastMsgSeqNumProcessed *(regexp.Regexp)
    ApplVerID *(regexp.Regexp)
    CstmApplVerID *(regexp.Regexp)
    AllocID *(regexp.Regexp)
    AllocTransType *(regexp.Regexp)
    AllocType *(regexp.Regexp)
    SecondaryAllocID *(regexp.Regexp)
    RefAllocID *(regexp.Regexp)
    AllocCancReplaceReason *(regexp.Regexp)
    AllocIntermedReqType *(regexp.Regexp)
    AllocLinkID *(regexp.Regexp)
    AllocLinkType *(regexp.Regexp)
    BookingRefID *(regexp.Regexp)
    AllocNoOrdersType *(regexp.Regexp)
    PreviouslyReported *(regexp.Regexp)
    ReversalIndicator *(regexp.Regexp)
    MatchType *(regexp.Regexp)
    Side *(regexp.Regexp)
    Symbol *(regexp.Regexp)
    SymbolSfx *(regexp.Regexp)
    SecurityID *(regexp.Regexp)
    SecurityIDSource *(regexp.Regexp)
    Product *(regexp.Regexp)
    CFICode *(regexp.Regexp)
    SecurityType *(regexp.Regexp)
    SecuritySubType *(regexp.Regexp)
    MaturityMonthYear *(regexp.Regexp)
    MaturityDate *(regexp.Regexp)
    CouponPaymentDate *(regexp.Regexp)
    IssueDate *(regexp.Regexp)
    RepoCollateralSecurityType *(regexp.Regexp)
    RepurchaseTerm *(regexp.Regexp)
    RepurchaseRate *(regexp.Regexp)
    Factor *(regexp.Regexp)
    CreditRating *(regexp.Regexp)
    InstrRegistry *(regexp.Regexp)
    CountryOfIssue *(regexp.Regexp)
    StateOrProvinceOfIssue *(regexp.Regexp)
    LocaleOfIssue *(regexp.Regexp)
    RedemptionDate *(regexp.Regexp)
    StrikePrice *(regexp.Regexp)
    StrikeCurrency *(regexp.Regexp)
    OptAttribute *(regexp.Regexp)
    ContractMultiplier *(regexp.Regexp)
    CouponRate *(regexp.Regexp)
    SecurityExchange *(regexp.Regexp)
    Issuer *(regexp.Regexp)
    EncodedIssuerLen *(regexp.Regexp)
    EncodedIssuer *(regexp.Regexp)
    SecurityDesc *(regexp.Regexp)
    EncodedSecurityDescLen *(regexp.Regexp)
    EncodedSecurityDesc *(regexp.Regexp)
    Pool *(regexp.Regexp)
    ContractSettlMonth *(regexp.Regexp)
    CPProgram *(regexp.Regexp)
    CPRegType *(regexp.Regexp)
    DatedDate *(regexp.Regexp)
    InterestAccrualDate *(regexp.Regexp)
    SecurityStatus *(regexp.Regexp)
    SettleOnOpenFlag *(regexp.Regexp)
    InstrmtAssignmentMethod *(regexp.Regexp)
    StrikeMultiplier *(regexp.Regexp)
    StrikeValue *(regexp.Regexp)
    MinPriceIncrement *(regexp.Regexp)
    PositionLimit *(regexp.Regexp)
    NTPositionLimit *(regexp.Regexp)
    UnitofMeasure *(regexp.Regexp)
    TimeUnit *(regexp.Regexp)
    MaturityTime *(regexp.Regexp)
    DeliveryForm *(regexp.Regexp)
    PctAtRisk *(regexp.Regexp)
    AgreementDesc *(regexp.Regexp)
    AgreementID *(regexp.Regexp)
    AgreementDate *(regexp.Regexp)
    AgreementCurrency *(regexp.Regexp)
    TerminationType *(regexp.Regexp)
    StartDate *(regexp.Regexp)
    EndDate *(regexp.Regexp)
    DeliveryType *(regexp.Regexp)
    MarginRatio *(regexp.Regexp)
    Quantity *(regexp.Regexp)
    QtyType *(regexp.Regexp)
    LastMkt *(regexp.Regexp)
    TradeOriginationDate *(regexp.Regexp)
    TradingSessionID *(regexp.Regexp)
    TradingSessionSubID *(regexp.Regexp)
    PriceType *(regexp.Regexp)
    AvgPx *(regexp.Regexp)
    AvgParPx *(regexp.Regexp)
    Spread *(regexp.Regexp)
    BenchmarkCurveCurrency *(regexp.Regexp)
    BenchmarkCurveName *(regexp.Regexp)
    BenchmarkCurvePoint *(regexp.Regexp)
    BenchmarkPrice *(regexp.Regexp)
    BenchmarkPriceType *(regexp.Regexp)
    BenchmarkSecurityID *(regexp.Regexp)
    BenchmarkSecurityIDSource *(regexp.Regexp)
    Currency *(regexp.Regexp)
    AvgPxPrecision *(regexp.Regexp)
    TradeDate *(regexp.Regexp)
    TransactTime *(regexp.Regexp)
    SettlType *(regexp.Regexp)
    SettlDate *(regexp.Regexp)
    BookingType *(regexp.Regexp)
    GrossTradeAmt *(regexp.Regexp)
    Concession *(regexp.Regexp)
    TotalTakedown *(regexp.Regexp)
    NetMoney *(regexp.Regexp)
    PositionEffect *(regexp.Regexp)
    AutoAcceptIndicator *(regexp.Regexp)
    Text *(regexp.Regexp)
    EncodedTextLen *(regexp.Regexp)
    EncodedText *(regexp.Regexp)
    NumDaysInterest *(regexp.Regexp)
    AccruedInterestRate *(regexp.Regexp)
    AccruedInterestAmt *(regexp.Regexp)
    TotalAccruedInterestAmt *(regexp.Regexp)
    InterestAtMaturity *(regexp.Regexp)
    EndAccruedInterestAmt *(regexp.Regexp)
    StartCash *(regexp.Regexp)
    EndCash *(regexp.Regexp)
    LegalConfirm *(regexp.Regexp)
    YieldType *(regexp.Regexp)
    Yield *(regexp.Regexp)
    YieldCalcDate *(regexp.Regexp)
    YieldRedemptionDate *(regexp.Regexp)
    YieldRedemptionPrice *(regexp.Regexp)
    YieldRedemptionPriceType *(regexp.Regexp)
    TotNoAllocs *(regexp.Regexp)
    LastFragment *(regexp.Regexp)
    AvgPxIndicator *(regexp.Regexp)
    ClearingBusinessDate *(regexp.Regexp)
    TrdType *(regexp.Regexp)
    TrdSubType *(regexp.Regexp)
    CustOrderCapacity *(regexp.Regexp)
    TradeInputSource *(regexp.Regexp)
    MultiLegReportingType *(regexp.Regexp)
    MessageEventSource *(regexp.Regexp)
    RndPx *(regexp.Regexp)
    SignatureLength *(regexp.Regexp)
    Signature *(regexp.Regexp)
    CheckSum *(regexp.Regexp)
    _controlBlock fixMessageControlBlock
}


var myAllocationInstruction_RegexValidator allocationInstruction_RegexValidator

func init() {
    myAllocationInstruction_RegexValidator
    myAllocationInstruction_RegexValidator.BeginString = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.BodyLength = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.MsgType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SenderCompID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.TargetCompID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.OnBehalfOfCompID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.DeliverToCompID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SecureDataLen = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.SecureData = regexp.MustCompile(`.*`)
    myAllocationInstruction_RegexValidator.MsgSeqNum = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.SenderSubID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SenderLocationID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.TargetSubID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.TargetLocationID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.OnBehalfOfSubID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.OnBehalfOfLocationID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.DeliverToSubID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.DeliverToLocationID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.PossDupFlag = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.PossResend = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.SendingTime = regexp.MustCompile(`\d{4}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])-([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](.\d{3})?`)
    myAllocationInstruction_RegexValidator.OrigSendingTime = regexp.MustCompile(`\d{4}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])-([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](.\d{3})?`)
    myAllocationInstruction_RegexValidator.XmlDataLen = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.XmlData = regexp.MustCompile(`.*`)
    myAllocationInstruction_RegexValidator.MessageEncoding = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.LastMsgSeqNumProcessed = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.ApplVerID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.CstmApplVerID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AllocID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AllocTransType = regexp.MustCompile(`[^|]`)
    myAllocationInstruction_RegexValidator.AllocType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.SecondaryAllocID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.RefAllocID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AllocCancReplaceReason = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.AllocIntermedReqType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.AllocLinkID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AllocLinkType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.BookingRefID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AllocNoOrdersType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.PreviouslyReported = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.ReversalIndicator = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.MatchType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.Side = regexp.MustCompile(`[^|]`)
    myAllocationInstruction_RegexValidator.Symbol = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SymbolSfx = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SecurityID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SecurityIDSource = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.Product = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.CFICode = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SecurityType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SecuritySubType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.MaturityMonthYear = regexp.MustCompile(`[0-9]{6}([0-9]{2}|w[0-9])?`)
    myAllocationInstruction_RegexValidator.MaturityDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.CouponPaymentDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.IssueDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.RepoCollateralSecurityType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.RepurchaseTerm = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.RepurchaseRate = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.Factor = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.CreditRating = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.InstrRegistry = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.CountryOfIssue = regexp.MustCompile(`[A-Z]{2}`)
    myAllocationInstruction_RegexValidator.StateOrProvinceOfIssue = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.LocaleOfIssue = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.RedemptionDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.StrikePrice = regexp.MustCompile(``)
    myAllocationInstruction_RegexValidator.StrikeCurrency = regexp.MustCompile(`[A-Z]{3}`)
    myAllocationInstruction_RegexValidator.OptAttribute = regexp.MustCompile(`[^|]`)
    myAllocationInstruction_RegexValidator.ContractMultiplier = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.CouponRate = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.SecurityExchange = regexp.MustCompile(`[A-Z0-9]{4}`)
    myAllocationInstruction_RegexValidator.Issuer = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.EncodedIssuerLen = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.EncodedIssuer = regexp.MustCompile(`.*`)
    myAllocationInstruction_RegexValidator.SecurityDesc = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.EncodedSecurityDescLen = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.EncodedSecurityDesc = regexp.MustCompile(`.*`)
    myAllocationInstruction_RegexValidator.Pool = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.ContractSettlMonth = regexp.MustCompile(`[0-9]{6}([0-9]{2}|w[0-9])?`)
    myAllocationInstruction_RegexValidator.CPProgram = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.CPRegType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.DatedDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.InterestAccrualDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.SecurityStatus = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SettleOnOpenFlag = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.InstrmtAssignmentMethod = regexp.MustCompile(`[^|]`)
    myAllocationInstruction_RegexValidator.StrikeMultiplier = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.StrikeValue = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.MinPriceIncrement = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.PositionLimit = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.NTPositionLimit = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.UnitofMeasure = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.TimeUnit = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.MaturityTime = regexp.MustCompile(`\d{2}:\d{2}(:\d{2})?(Z|[\+-]\d{2}(:\d{2})?)`)
    myAllocationInstruction_RegexValidator.DeliveryForm = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.PctAtRisk = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.AgreementDesc = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AgreementID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.AgreementDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.AgreementCurrency = regexp.MustCompile(`[A-Z]{3}`)
    myAllocationInstruction_RegexValidator.TerminationType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.StartDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.EndDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.DeliveryType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.MarginRatio = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.Quantity = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.QtyType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.LastMkt = regexp.MustCompile(`[A-Z0-9]{4}`)
    myAllocationInstruction_RegexValidator.TradeOriginationDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.TradingSessionID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.TradingSessionSubID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.PriceType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.AvgPx = regexp.MustCompile(``)
    myAllocationInstruction_RegexValidator.AvgParPx = regexp.MustCompile(``)
    myAllocationInstruction_RegexValidator.Spread = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.BenchmarkCurveCurrency = regexp.MustCompile(`[A-Z]{3}`)
    myAllocationInstruction_RegexValidator.BenchmarkCurveName = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.BenchmarkCurvePoint = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.BenchmarkPrice = regexp.MustCompile(``)
    myAllocationInstruction_RegexValidator.BenchmarkPriceType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.BenchmarkSecurityID = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.BenchmarkSecurityIDSource = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.Currency = regexp.MustCompile(`[A-Z]{3}`)
    myAllocationInstruction_RegexValidator.AvgPxPrecision = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.TradeDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.TransactTime = regexp.MustCompile(`\d{4}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])-([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](.\d{3})?`)
    myAllocationInstruction_RegexValidator.SettlType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.SettlDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.BookingType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.GrossTradeAmt = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.Concession = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.TotalTakedown = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.NetMoney = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.PositionEffect = regexp.MustCompile(`[^|]`)
    myAllocationInstruction_RegexValidator.AutoAcceptIndicator = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.Text = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.EncodedTextLen = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.EncodedText = regexp.MustCompile(`.*`)
    myAllocationInstruction_RegexValidator.NumDaysInterest = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.AccruedInterestRate = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.AccruedInterestAmt = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.TotalAccruedInterestAmt = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.InterestAtMaturity = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.EndAccruedInterestAmt = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.StartCash = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.EndCash = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.LegalConfirm = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.YieldType = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.Yield = regexp.MustCompile(`-?\d*(\.\d*)?`)
    myAllocationInstruction_RegexValidator.YieldCalcDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.YieldRedemptionDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.YieldRedemptionPrice = regexp.MustCompile(``)
    myAllocationInstruction_RegexValidator.YieldRedemptionPriceType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.TotNoAllocs = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.LastFragment = regexp.MustCompile(`[YN]`)
    myAllocationInstruction_RegexValidator.AvgPxIndicator = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.ClearingBusinessDate = regexp.MustCompile(`[0-9]{8}`)
    myAllocationInstruction_RegexValidator.TrdType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.TrdSubType = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.CustOrderCapacity = regexp.MustCompile(`-?\d+`)
    myAllocationInstruction_RegexValidator.TradeInputSource = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.MultiLegReportingType = regexp.MustCompile(`[^|]`)
    myAllocationInstruction_RegexValidator.MessageEventSource = regexp.MustCompile(`[^|]*`)
    myAllocationInstruction_RegexValidator.RndPx = regexp.MustCompile(``)
    myAllocationInstruction_RegexValidator.SignatureLength = regexp.MustCompile(`\d+`)
    myAllocationInstruction_RegexValidator.Signature = regexp.MustCompile(`.*`)
    myAllocationInstruction_RegexValidator.CheckSum = regexp.MustCompile(`[^|]*`)
}



func (m *AllocationInstruction) HasRequiredFields() bool {
    valid := true
    
    isSetExecAllocGrp := false
    isValidExecAllocGrp := true

    
    
    valid = valid && m.BeginString.HasValue()
    
    
    
    valid = valid && m.BodyLength.HasValue()
    
    
    
    valid = valid && m.MsgType.HasValue()
    
    
    
    valid = valid && m.SenderCompID.HasValue()
    
    
    
    valid = valid && m.TargetCompID.HasValue()
    
    
    
    valid = valid && m.MsgSeqNum.HasValue()
    
    
    
    valid = valid && m.SendingTime.HasValue()
    
    
    
    for _, g := range(m.Hops) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.AllocID.HasValue()
    
    
    
    valid = valid && m.AllocTransType.HasValue()
    
    
    
    valid = valid && m.AllocType.HasValue()
    
    
    
    for _, g := range(m.Orders) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    isSetExecAllocGrp = isSetExecAllocGrp || len(m.Execs) > 0
    for _, g := range(m.Execs) {
        isValidExecAllocGrp = isValidExecAllocGrp && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.Side.HasValue()
    
    
    
    for _, g := range(m.SecurityAltID) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.Events) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.InstrumentParties) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.InstrAttrib) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.Underlyings) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.Legs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.Quantity.HasValue()
    
    
    
    for _, g := range(m.PartyIDs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.TradeDate.HasValue()
    
    
    
    for _, g := range(m.Stipulations) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.Allocs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.PosAmt) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.CheckSum.HasValue()
    
    
    
    valid = valid && (isSetExecAllocGrp == false || isValidExecAllocGrp)
    
    return valid
}




