package OrderMassStatusRequest

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import HopGrp_Hops "grgrbll/fix/Shared/HopGrp_Hops"

import Parties_PartyIDs "grgrbll/fix/Shared/Parties_PartyIDs"

import SecAltIDGrp_SecurityAltID "grgrbll/fix/Shared/SecAltIDGrp_SecurityAltID"

import EvntGrp_Events "grgrbll/fix/Shared/EvntGrp_Events"

import InstrumentParties_InstrumentParties "grgrbll/fix/Shared/InstrumentParties_InstrumentParties"

import UndSecAltIDGrp_UnderlyingSecurityAltID "grgrbll/fix/Shared/UndSecAltIDGrp_UnderlyingSecurityAltID"

import UnderlyingStipulations_UnderlyingStips "grgrbll/fix/Shared/UnderlyingStipulations_UnderlyingStips"

import UndlyInstrumentParties_UndlyInstrumentParties "grgrbll/fix/Shared/UndlyInstrumentParties_UndlyInstrumentParties"


func (m *OrderMassStatusRequest) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.BeginString.HasValue() {
        (*res).WriteString("8=")
        val, err := m.BeginString.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BodyLength.HasValue() {
        (*res).WriteString("9=")
        val, err := m.BodyLength.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgType.HasValue() {
        (*res).WriteString("35=")
        val, err := m.MsgType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderCompID.HasValue() {
        (*res).WriteString("49=")
        val, err := m.SenderCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetCompID.HasValue() {
        (*res).WriteString("56=")
        val, err := m.TargetCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfCompID.HasValue() {
        (*res).WriteString("115=")
        val, err := m.OnBehalfOfCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToCompID.HasValue() {
        (*res).WriteString("128=")
        val, err := m.DeliverToCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecureDataLen.HasValue() {
        (*res).WriteString("90=")
        val, err := m.SecureDataLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecureData.HasValue() {
        (*res).WriteString("91=")
        val, err := m.SecureData.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgSeqNum.HasValue() {
        (*res).WriteString("34=")
        val, err := m.MsgSeqNum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderSubID.HasValue() {
        (*res).WriteString("50=")
        val, err := m.SenderSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderLocationID.HasValue() {
        (*res).WriteString("142=")
        val, err := m.SenderLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetSubID.HasValue() {
        (*res).WriteString("57=")
        val, err := m.TargetSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetLocationID.HasValue() {
        (*res).WriteString("143=")
        val, err := m.TargetLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfSubID.HasValue() {
        (*res).WriteString("116=")
        val, err := m.OnBehalfOfSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfLocationID.HasValue() {
        (*res).WriteString("144=")
        val, err := m.OnBehalfOfLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToSubID.HasValue() {
        (*res).WriteString("129=")
        val, err := m.DeliverToSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToLocationID.HasValue() {
        (*res).WriteString("145=")
        val, err := m.DeliverToLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PossDupFlag.HasValue() {
        (*res).WriteString("43=")
        val, err := m.PossDupFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PossResend.HasValue() {
        (*res).WriteString("97=")
        val, err := m.PossResend.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SendingTime.HasValue() {
        (*res).WriteString("52=")
        val, err := m.SendingTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigSendingTime.HasValue() {
        (*res).WriteString("122=")
        val, err := m.OrigSendingTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.XmlDataLen.HasValue() {
        (*res).WriteString("212=")
        val, err := m.XmlDataLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.XmlData.HasValue() {
        (*res).WriteString("213=")
        val, err := m.XmlData.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MessageEncoding.HasValue() {
        (*res).WriteString("347=")
        val, err := m.MessageEncoding.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastMsgSeqNumProcessed.HasValue() {
        (*res).WriteString("369=")
        val, err := m.LastMsgSeqNumProcessed.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Hops) > 0 {
    
    (*res).WriteString("627=")
    (*res).WriteString(strconv.Itoa(len(m.Hops)))
    (*res).WriteString("\x01")
    for _, g := range m.Hops {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.ApplVerID.HasValue() {
        (*res).WriteString("1128=")
        val, err := m.ApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CstmApplVerID.HasValue() {
        (*res).WriteString("1129=")
        val, err := m.CstmApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MassStatusReqID.HasValue() {
        (*res).WriteString("584=")
        val, err := m.MassStatusReqID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MassStatusReqType.HasValue() {
        (*res).WriteString("585=")
        val, err := m.MassStatusReqType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PartyIDs) > 0 {
    
    (*res).WriteString("453=")
    (*res).WriteString(strconv.Itoa(len(m.PartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.PartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.Account.HasValue() {
        (*res).WriteString("1=")
        val, err := m.Account.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AcctIDSource.HasValue() {
        (*res).WriteString("660=")
        val, err := m.AcctIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionID.HasValue() {
        (*res).WriteString("336=")
        val, err := m.TradingSessionID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradingSessionSubID.HasValue() {
        (*res).WriteString("625=")
        val, err := m.TradingSessionSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Symbol.HasValue() {
        (*res).WriteString("55=")
        val, err := m.Symbol.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SymbolSfx.HasValue() {
        (*res).WriteString("65=")
        val, err := m.SymbolSfx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityID.HasValue() {
        (*res).WriteString("48=")
        val, err := m.SecurityID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityIDSource.HasValue() {
        (*res).WriteString("22=")
        val, err := m.SecurityIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.SecurityAltID) > 0 {
    
    (*res).WriteString("454=")
    (*res).WriteString(strconv.Itoa(len(m.SecurityAltID)))
    (*res).WriteString("\x01")
    for _, g := range m.SecurityAltID {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.Product.HasValue() {
        (*res).WriteString("460=")
        val, err := m.Product.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CFICode.HasValue() {
        (*res).WriteString("461=")
        val, err := m.CFICode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityType.HasValue() {
        (*res).WriteString("167=")
        val, err := m.SecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecuritySubType.HasValue() {
        (*res).WriteString("762=")
        val, err := m.SecuritySubType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityMonthYear.HasValue() {
        (*res).WriteString("200=")
        val, err := m.MaturityMonthYear.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityDate.HasValue() {
        (*res).WriteString("541=")
        val, err := m.MaturityDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CouponPaymentDate.HasValue() {
        (*res).WriteString("224=")
        val, err := m.CouponPaymentDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IssueDate.HasValue() {
        (*res).WriteString("225=")
        val, err := m.IssueDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepoCollateralSecurityType.HasValue() {
        (*res).WriteString("239=")
        val, err := m.RepoCollateralSecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepurchaseTerm.HasValue() {
        (*res).WriteString("226=")
        val, err := m.RepurchaseTerm.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepurchaseRate.HasValue() {
        (*res).WriteString("227=")
        val, err := m.RepurchaseRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Factor.HasValue() {
        (*res).WriteString("228=")
        val, err := m.Factor.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CreditRating.HasValue() {
        (*res).WriteString("255=")
        val, err := m.CreditRating.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InstrRegistry.HasValue() {
        (*res).WriteString("543=")
        val, err := m.InstrRegistry.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CountryOfIssue.HasValue() {
        (*res).WriteString("470=")
        val, err := m.CountryOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StateOrProvinceOfIssue.HasValue() {
        (*res).WriteString("471=")
        val, err := m.StateOrProvinceOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LocaleOfIssue.HasValue() {
        (*res).WriteString("472=")
        val, err := m.LocaleOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RedemptionDate.HasValue() {
        (*res).WriteString("240=")
        val, err := m.RedemptionDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikePrice.HasValue() {
        (*res).WriteString("202=")
        val, err := m.StrikePrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeCurrency.HasValue() {
        (*res).WriteString("947=")
        val, err := m.StrikeCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OptAttribute.HasValue() {
        (*res).WriteString("206=")
        val, err := m.OptAttribute.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ContractMultiplier.HasValue() {
        (*res).WriteString("231=")
        val, err := m.ContractMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CouponRate.HasValue() {
        (*res).WriteString("223=")
        val, err := m.CouponRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityExchange.HasValue() {
        (*res).WriteString("207=")
        val, err := m.SecurityExchange.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Issuer.HasValue() {
        (*res).WriteString("106=")
        val, err := m.Issuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedIssuerLen.HasValue() {
        (*res).WriteString("348=")
        val, err := m.EncodedIssuerLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedIssuer.HasValue() {
        (*res).WriteString("349=")
        val, err := m.EncodedIssuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityDesc.HasValue() {
        (*res).WriteString("107=")
        val, err := m.SecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedSecurityDescLen.HasValue() {
        (*res).WriteString("350=")
        val, err := m.EncodedSecurityDescLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedSecurityDesc.HasValue() {
        (*res).WriteString("351=")
        val, err := m.EncodedSecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Pool.HasValue() {
        (*res).WriteString("691=")
        val, err := m.Pool.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ContractSettlMonth.HasValue() {
        (*res).WriteString("667=")
        val, err := m.ContractSettlMonth.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CPProgram.HasValue() {
        (*res).WriteString("875=")
        val, err := m.CPProgram.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CPRegType.HasValue() {
        (*res).WriteString("876=")
        val, err := m.CPRegType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Events) > 0 {
    
    (*res).WriteString("864=")
    (*res).WriteString(strconv.Itoa(len(m.Events)))
    (*res).WriteString("\x01")
    for _, g := range m.Events {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.DatedDate.HasValue() {
        (*res).WriteString("873=")
        val, err := m.DatedDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InterestAccrualDate.HasValue() {
        (*res).WriteString("874=")
        val, err := m.InterestAccrualDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityStatus.HasValue() {
        (*res).WriteString("965=")
        val, err := m.SecurityStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettleOnOpenFlag.HasValue() {
        (*res).WriteString("966=")
        val, err := m.SettleOnOpenFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InstrmtAssignmentMethod.HasValue() {
        (*res).WriteString("1049=")
        val, err := m.InstrmtAssignmentMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeMultiplier.HasValue() {
        (*res).WriteString("967=")
        val, err := m.StrikeMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeValue.HasValue() {
        (*res).WriteString("968=")
        val, err := m.StrikeValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MinPriceIncrement.HasValue() {
        (*res).WriteString("969=")
        val, err := m.MinPriceIncrement.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PositionLimit.HasValue() {
        (*res).WriteString("970=")
        val, err := m.PositionLimit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.NTPositionLimit.HasValue() {
        (*res).WriteString("971=")
        val, err := m.NTPositionLimit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.InstrumentParties) > 0 {
    
    (*res).WriteString("1018=")
    (*res).WriteString(strconv.Itoa(len(m.InstrumentParties)))
    (*res).WriteString("\x01")
    for _, g := range m.InstrumentParties {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.UnitofMeasure.HasValue() {
        (*res).WriteString("996=")
        val, err := m.UnitofMeasure.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TimeUnit.HasValue() {
        (*res).WriteString("997=")
        val, err := m.TimeUnit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityTime.HasValue() {
        (*res).WriteString("1079=")
        val, err := m.MaturityTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSymbol.HasValue() {
        (*res).WriteString("311=")
        val, err := m.UnderlyingSymbol.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSymbolSfx.HasValue() {
        (*res).WriteString("312=")
        val, err := m.UnderlyingSymbolSfx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSecurityID.HasValue() {
        (*res).WriteString("309=")
        val, err := m.UnderlyingSecurityID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSecurityIDSource.HasValue() {
        (*res).WriteString("305=")
        val, err := m.UnderlyingSecurityIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.UnderlyingSecurityAltID) > 0 {
    
    (*res).WriteString("457=")
    (*res).WriteString(strconv.Itoa(len(m.UnderlyingSecurityAltID)))
    (*res).WriteString("\x01")
    for _, g := range m.UnderlyingSecurityAltID {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.UnderlyingProduct.HasValue() {
        (*res).WriteString("462=")
        val, err := m.UnderlyingProduct.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCFICode.HasValue() {
        (*res).WriteString("463=")
        val, err := m.UnderlyingCFICode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSecurityType.HasValue() {
        (*res).WriteString("310=")
        val, err := m.UnderlyingSecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSecuritySubType.HasValue() {
        (*res).WriteString("763=")
        val, err := m.UnderlyingSecuritySubType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingMaturityMonthYear.HasValue() {
        (*res).WriteString("313=")
        val, err := m.UnderlyingMaturityMonthYear.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingMaturityDate.HasValue() {
        (*res).WriteString("542=")
        val, err := m.UnderlyingMaturityDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCouponPaymentDate.HasValue() {
        (*res).WriteString("241=")
        val, err := m.UnderlyingCouponPaymentDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingIssueDate.HasValue() {
        (*res).WriteString("242=")
        val, err := m.UnderlyingIssueDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingRepoCollateralSecurityType.HasValue() {
        (*res).WriteString("243=")
        val, err := m.UnderlyingRepoCollateralSecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingRepurchaseTerm.HasValue() {
        (*res).WriteString("244=")
        val, err := m.UnderlyingRepurchaseTerm.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingRepurchaseRate.HasValue() {
        (*res).WriteString("245=")
        val, err := m.UnderlyingRepurchaseRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingFactor.HasValue() {
        (*res).WriteString("246=")
        val, err := m.UnderlyingFactor.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCreditRating.HasValue() {
        (*res).WriteString("256=")
        val, err := m.UnderlyingCreditRating.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingInstrRegistry.HasValue() {
        (*res).WriteString("595=")
        val, err := m.UnderlyingInstrRegistry.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCountryOfIssue.HasValue() {
        (*res).WriteString("592=")
        val, err := m.UnderlyingCountryOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingStateOrProvinceOfIssue.HasValue() {
        (*res).WriteString("593=")
        val, err := m.UnderlyingStateOrProvinceOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingLocaleOfIssue.HasValue() {
        (*res).WriteString("594=")
        val, err := m.UnderlyingLocaleOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingRedemptionDate.HasValue() {
        (*res).WriteString("247=")
        val, err := m.UnderlyingRedemptionDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingStrikePrice.HasValue() {
        (*res).WriteString("316=")
        val, err := m.UnderlyingStrikePrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingStrikeCurrency.HasValue() {
        (*res).WriteString("941=")
        val, err := m.UnderlyingStrikeCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingOptAttribute.HasValue() {
        (*res).WriteString("317=")
        val, err := m.UnderlyingOptAttribute.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingContractMultiplier.HasValue() {
        (*res).WriteString("436=")
        val, err := m.UnderlyingContractMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCouponRate.HasValue() {
        (*res).WriteString("435=")
        val, err := m.UnderlyingCouponRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSecurityExchange.HasValue() {
        (*res).WriteString("308=")
        val, err := m.UnderlyingSecurityExchange.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingIssuer.HasValue() {
        (*res).WriteString("306=")
        val, err := m.UnderlyingIssuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedUnderlyingIssuerLen.HasValue() {
        (*res).WriteString("362=")
        val, err := m.EncodedUnderlyingIssuerLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedUnderlyingIssuer.HasValue() {
        (*res).WriteString("363=")
        val, err := m.EncodedUnderlyingIssuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSecurityDesc.HasValue() {
        (*res).WriteString("307=")
        val, err := m.UnderlyingSecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedUnderlyingSecurityDescLen.HasValue() {
        (*res).WriteString("364=")
        val, err := m.EncodedUnderlyingSecurityDescLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedUnderlyingSecurityDesc.HasValue() {
        (*res).WriteString("365=")
        val, err := m.EncodedUnderlyingSecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCPProgram.HasValue() {
        (*res).WriteString("877=")
        val, err := m.UnderlyingCPProgram.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCPRegType.HasValue() {
        (*res).WriteString("878=")
        val, err := m.UnderlyingCPRegType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCurrency.HasValue() {
        (*res).WriteString("318=")
        val, err := m.UnderlyingCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingQty.HasValue() {
        (*res).WriteString("879=")
        val, err := m.UnderlyingQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingPx.HasValue() {
        (*res).WriteString("810=")
        val, err := m.UnderlyingPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingDirtyPrice.HasValue() {
        (*res).WriteString("882=")
        val, err := m.UnderlyingDirtyPrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingEndPrice.HasValue() {
        (*res).WriteString("883=")
        val, err := m.UnderlyingEndPrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingStartValue.HasValue() {
        (*res).WriteString("884=")
        val, err := m.UnderlyingStartValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCurrentValue.HasValue() {
        (*res).WriteString("885=")
        val, err := m.UnderlyingCurrentValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingEndValue.HasValue() {
        (*res).WriteString("886=")
        val, err := m.UnderlyingEndValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.UnderlyingStips) > 0 {
    
    (*res).WriteString("887=")
    (*res).WriteString(strconv.Itoa(len(m.UnderlyingStips)))
    (*res).WriteString("\x01")
    for _, g := range m.UnderlyingStips {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.UnderlyingAllocationPercent.HasValue() {
        (*res).WriteString("972=")
        val, err := m.UnderlyingAllocationPercent.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingSettlementType.HasValue() {
        (*res).WriteString("975=")
        val, err := m.UnderlyingSettlementType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCashAmount.HasValue() {
        (*res).WriteString("973=")
        val, err := m.UnderlyingCashAmount.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCashType.HasValue() {
        (*res).WriteString("974=")
        val, err := m.UnderlyingCashType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingUnitofMeasure.HasValue() {
        (*res).WriteString("998=")
        val, err := m.UnderlyingUnitofMeasure.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingTimeUnit.HasValue() {
        (*res).WriteString("1000=")
        val, err := m.UnderlyingTimeUnit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingCapValue.HasValue() {
        (*res).WriteString("1038=")
        val, err := m.UnderlyingCapValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.UndlyInstrumentParties) > 0 {
    
    (*res).WriteString("1058=")
    (*res).WriteString(strconv.Itoa(len(m.UndlyInstrumentParties)))
    (*res).WriteString("\x01")
    for _, g := range m.UndlyInstrumentParties {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.UnderlyingSettlMethod.HasValue() {
        (*res).WriteString("1039=")
        val, err := m.UnderlyingSettlMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingAdjustedQuantity.HasValue() {
        (*res).WriteString("1044=")
        val, err := m.UnderlyingAdjustedQuantity.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingFXRate.HasValue() {
        (*res).WriteString("1045=")
        val, err := m.UnderlyingFXRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingFXRateCalc.HasValue() {
        (*res).WriteString("1046=")
        val, err := m.UnderlyingFXRateCalc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Side.HasValue() {
        (*res).WriteString("54=")
        val, err := m.Side.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SignatureLength.HasValue() {
        (*res).WriteString("93=")
        val, err := m.SignatureLength.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Signature.HasValue() {
        (*res).WriteString("89=")
        val, err := m.Signature.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CheckSum.HasValue() {
        (*res).WriteString("10=")
        val, err := m.CheckSum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *OrderMassStatusRequest) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message OrderMassStatusRequest (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *OrderMassStatusRequest) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 8:
            if !m.BeginString.HasValue() {
                used = true
                err = m.BeginString.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 9:
            if !m.BodyLength.HasValue() {
                used = true
                err = m.BodyLength.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 35:
            if !m.MsgType.HasValue() {
                used = true
                err = m.MsgType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 49:
            if !m.SenderCompID.HasValue() {
                used = true
                err = m.SenderCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 56:
            if !m.TargetCompID.HasValue() {
                used = true
                err = m.TargetCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 115:
            if !m.OnBehalfOfCompID.HasValue() {
                used = true
                err = m.OnBehalfOfCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 128:
            if !m.DeliverToCompID.HasValue() {
                used = true
                err = m.DeliverToCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 90:
            if !m.SecureDataLen.HasValue() {
                used = true
                err = m.SecureDataLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 91:
            if !m.SecureData.HasValue() {
                used = true
                err = m.SecureData.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 34:
            if !m.MsgSeqNum.HasValue() {
                used = true
                err = m.MsgSeqNum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 50:
            if !m.SenderSubID.HasValue() {
                used = true
                err = m.SenderSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 142:
            if !m.SenderLocationID.HasValue() {
                used = true
                err = m.SenderLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 57:
            if !m.TargetSubID.HasValue() {
                used = true
                err = m.TargetSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 143:
            if !m.TargetLocationID.HasValue() {
                used = true
                err = m.TargetLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 116:
            if !m.OnBehalfOfSubID.HasValue() {
                used = true
                err = m.OnBehalfOfSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 144:
            if !m.OnBehalfOfLocationID.HasValue() {
                used = true
                err = m.OnBehalfOfLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 129:
            if !m.DeliverToSubID.HasValue() {
                used = true
                err = m.DeliverToSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 145:
            if !m.DeliverToLocationID.HasValue() {
                used = true
                err = m.DeliverToLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 43:
            if !m.PossDupFlag.HasValue() {
                used = true
                err = m.PossDupFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 97:
            if !m.PossResend.HasValue() {
                used = true
                err = m.PossResend.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 52:
            if !m.SendingTime.HasValue() {
                used = true
                err = m.SendingTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 122:
            if !m.OrigSendingTime.HasValue() {
                used = true
                err = m.OrigSendingTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 212:
            if !m.XmlDataLen.HasValue() {
                used = true
                err = m.XmlDataLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 213:
            if !m.XmlData.HasValue() {
                used = true
                err = m.XmlData.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 347:
            if !m.MessageEncoding.HasValue() {
                used = true
                err = m.MessageEncoding.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 369:
            if !m.LastMsgSeqNumProcessed.HasValue() {
                used = true
                err = m.LastMsgSeqNumProcessed.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 627:
            // This counter (NoHops) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Hops = make([]HopGrp_Hops, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Hops[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1128:
            if !m.ApplVerID.HasValue() {
                used = true
                err = m.ApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1129:
            if !m.CstmApplVerID.HasValue() {
                used = true
                err = m.CstmApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 584:
            if !m.MassStatusReqID.HasValue() {
                used = true
                err = m.MassStatusReqID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 585:
            if !m.MassStatusReqType.HasValue() {
                used = true
                err = m.MassStatusReqType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 453:
            // This counter (NoPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PartyIDs = make([]Parties_PartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1:
            if !m.Account.HasValue() {
                used = true
                err = m.Account.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 660:
            if !m.AcctIDSource.HasValue() {
                used = true
                err = m.AcctIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 336:
            if !m.TradingSessionID.HasValue() {
                used = true
                err = m.TradingSessionID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 625:
            if !m.TradingSessionSubID.HasValue() {
                used = true
                err = m.TradingSessionSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 55:
            if !m.Symbol.HasValue() {
                used = true
                err = m.Symbol.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 65:
            if !m.SymbolSfx.HasValue() {
                used = true
                err = m.SymbolSfx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 48:
            if !m.SecurityID.HasValue() {
                used = true
                err = m.SecurityID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 22:
            if !m.SecurityIDSource.HasValue() {
                used = true
                err = m.SecurityIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 454:
            // This counter (NoSecurityAltID) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.SecurityAltID = make([]SecAltIDGrp_SecurityAltID, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.SecurityAltID[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 460:
            if !m.Product.HasValue() {
                used = true
                err = m.Product.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 461:
            if !m.CFICode.HasValue() {
                used = true
                err = m.CFICode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 167:
            if !m.SecurityType.HasValue() {
                used = true
                err = m.SecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 762:
            if !m.SecuritySubType.HasValue() {
                used = true
                err = m.SecuritySubType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 200:
            if !m.MaturityMonthYear.HasValue() {
                used = true
                err = m.MaturityMonthYear.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 541:
            if !m.MaturityDate.HasValue() {
                used = true
                err = m.MaturityDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 224:
            if !m.CouponPaymentDate.HasValue() {
                used = true
                err = m.CouponPaymentDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 225:
            if !m.IssueDate.HasValue() {
                used = true
                err = m.IssueDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 239:
            if !m.RepoCollateralSecurityType.HasValue() {
                used = true
                err = m.RepoCollateralSecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 226:
            if !m.RepurchaseTerm.HasValue() {
                used = true
                err = m.RepurchaseTerm.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 227:
            if !m.RepurchaseRate.HasValue() {
                used = true
                err = m.RepurchaseRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 228:
            if !m.Factor.HasValue() {
                used = true
                err = m.Factor.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 255:
            if !m.CreditRating.HasValue() {
                used = true
                err = m.CreditRating.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 543:
            if !m.InstrRegistry.HasValue() {
                used = true
                err = m.InstrRegistry.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 470:
            if !m.CountryOfIssue.HasValue() {
                used = true
                err = m.CountryOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 471:
            if !m.StateOrProvinceOfIssue.HasValue() {
                used = true
                err = m.StateOrProvinceOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 472:
            if !m.LocaleOfIssue.HasValue() {
                used = true
                err = m.LocaleOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 240:
            if !m.RedemptionDate.HasValue() {
                used = true
                err = m.RedemptionDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 202:
            if !m.StrikePrice.HasValue() {
                used = true
                err = m.StrikePrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 947:
            if !m.StrikeCurrency.HasValue() {
                used = true
                err = m.StrikeCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 206:
            if !m.OptAttribute.HasValue() {
                used = true
                err = m.OptAttribute.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 231:
            if !m.ContractMultiplier.HasValue() {
                used = true
                err = m.ContractMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 223:
            if !m.CouponRate.HasValue() {
                used = true
                err = m.CouponRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 207:
            if !m.SecurityExchange.HasValue() {
                used = true
                err = m.SecurityExchange.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 106:
            if !m.Issuer.HasValue() {
                used = true
                err = m.Issuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 348:
            if !m.EncodedIssuerLen.HasValue() {
                used = true
                err = m.EncodedIssuerLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 349:
            if !m.EncodedIssuer.HasValue() {
                used = true
                err = m.EncodedIssuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 107:
            if !m.SecurityDesc.HasValue() {
                used = true
                err = m.SecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 350:
            if !m.EncodedSecurityDescLen.HasValue() {
                used = true
                err = m.EncodedSecurityDescLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 351:
            if !m.EncodedSecurityDesc.HasValue() {
                used = true
                err = m.EncodedSecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 691:
            if !m.Pool.HasValue() {
                used = true
                err = m.Pool.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 667:
            if !m.ContractSettlMonth.HasValue() {
                used = true
                err = m.ContractSettlMonth.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 875:
            if !m.CPProgram.HasValue() {
                used = true
                err = m.CPProgram.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 876:
            if !m.CPRegType.HasValue() {
                used = true
                err = m.CPRegType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 864:
            // This counter (NoEvents) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Events = make([]EvntGrp_Events, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Events[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 873:
            if !m.DatedDate.HasValue() {
                used = true
                err = m.DatedDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 874:
            if !m.InterestAccrualDate.HasValue() {
                used = true
                err = m.InterestAccrualDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 965:
            if !m.SecurityStatus.HasValue() {
                used = true
                err = m.SecurityStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 966:
            if !m.SettleOnOpenFlag.HasValue() {
                used = true
                err = m.SettleOnOpenFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1049:
            if !m.InstrmtAssignmentMethod.HasValue() {
                used = true
                err = m.InstrmtAssignmentMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 967:
            if !m.StrikeMultiplier.HasValue() {
                used = true
                err = m.StrikeMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 968:
            if !m.StrikeValue.HasValue() {
                used = true
                err = m.StrikeValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 969:
            if !m.MinPriceIncrement.HasValue() {
                used = true
                err = m.MinPriceIncrement.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 970:
            if !m.PositionLimit.HasValue() {
                used = true
                err = m.PositionLimit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 971:
            if !m.NTPositionLimit.HasValue() {
                used = true
                err = m.NTPositionLimit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1018:
            // This counter (NoInstrumentParties) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.InstrumentParties = make([]InstrumentParties_InstrumentParties, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.InstrumentParties[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 996:
            if !m.UnitofMeasure.HasValue() {
                used = true
                err = m.UnitofMeasure.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 997:
            if !m.TimeUnit.HasValue() {
                used = true
                err = m.TimeUnit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1079:
            if !m.MaturityTime.HasValue() {
                used = true
                err = m.MaturityTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 311:
            if !m.UnderlyingSymbol.HasValue() {
                used = true
                err = m.UnderlyingSymbol.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 312:
            if !m.UnderlyingSymbolSfx.HasValue() {
                used = true
                err = m.UnderlyingSymbolSfx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 309:
            if !m.UnderlyingSecurityID.HasValue() {
                used = true
                err = m.UnderlyingSecurityID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 305:
            if !m.UnderlyingSecurityIDSource.HasValue() {
                used = true
                err = m.UnderlyingSecurityIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 457:
            // This counter (NoUnderlyingSecurityAltID) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.UnderlyingSecurityAltID = make([]UndSecAltIDGrp_UnderlyingSecurityAltID, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.UnderlyingSecurityAltID[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 462:
            if !m.UnderlyingProduct.HasValue() {
                used = true
                err = m.UnderlyingProduct.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 463:
            if !m.UnderlyingCFICode.HasValue() {
                used = true
                err = m.UnderlyingCFICode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 310:
            if !m.UnderlyingSecurityType.HasValue() {
                used = true
                err = m.UnderlyingSecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 763:
            if !m.UnderlyingSecuritySubType.HasValue() {
                used = true
                err = m.UnderlyingSecuritySubType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 313:
            if !m.UnderlyingMaturityMonthYear.HasValue() {
                used = true
                err = m.UnderlyingMaturityMonthYear.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 542:
            if !m.UnderlyingMaturityDate.HasValue() {
                used = true
                err = m.UnderlyingMaturityDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 241:
            if !m.UnderlyingCouponPaymentDate.HasValue() {
                used = true
                err = m.UnderlyingCouponPaymentDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 242:
            if !m.UnderlyingIssueDate.HasValue() {
                used = true
                err = m.UnderlyingIssueDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 243:
            if !m.UnderlyingRepoCollateralSecurityType.HasValue() {
                used = true
                err = m.UnderlyingRepoCollateralSecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 244:
            if !m.UnderlyingRepurchaseTerm.HasValue() {
                used = true
                err = m.UnderlyingRepurchaseTerm.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 245:
            if !m.UnderlyingRepurchaseRate.HasValue() {
                used = true
                err = m.UnderlyingRepurchaseRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 246:
            if !m.UnderlyingFactor.HasValue() {
                used = true
                err = m.UnderlyingFactor.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 256:
            if !m.UnderlyingCreditRating.HasValue() {
                used = true
                err = m.UnderlyingCreditRating.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 595:
            if !m.UnderlyingInstrRegistry.HasValue() {
                used = true
                err = m.UnderlyingInstrRegistry.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 592:
            if !m.UnderlyingCountryOfIssue.HasValue() {
                used = true
                err = m.UnderlyingCountryOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 593:
            if !m.UnderlyingStateOrProvinceOfIssue.HasValue() {
                used = true
                err = m.UnderlyingStateOrProvinceOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 594:
            if !m.UnderlyingLocaleOfIssue.HasValue() {
                used = true
                err = m.UnderlyingLocaleOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 247:
            if !m.UnderlyingRedemptionDate.HasValue() {
                used = true
                err = m.UnderlyingRedemptionDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 316:
            if !m.UnderlyingStrikePrice.HasValue() {
                used = true
                err = m.UnderlyingStrikePrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 941:
            if !m.UnderlyingStrikeCurrency.HasValue() {
                used = true
                err = m.UnderlyingStrikeCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 317:
            if !m.UnderlyingOptAttribute.HasValue() {
                used = true
                err = m.UnderlyingOptAttribute.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 436:
            if !m.UnderlyingContractMultiplier.HasValue() {
                used = true
                err = m.UnderlyingContractMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 435:
            if !m.UnderlyingCouponRate.HasValue() {
                used = true
                err = m.UnderlyingCouponRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 308:
            if !m.UnderlyingSecurityExchange.HasValue() {
                used = true
                err = m.UnderlyingSecurityExchange.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 306:
            if !m.UnderlyingIssuer.HasValue() {
                used = true
                err = m.UnderlyingIssuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 362:
            if !m.EncodedUnderlyingIssuerLen.HasValue() {
                used = true
                err = m.EncodedUnderlyingIssuerLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 363:
            if !m.EncodedUnderlyingIssuer.HasValue() {
                used = true
                err = m.EncodedUnderlyingIssuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 307:
            if !m.UnderlyingSecurityDesc.HasValue() {
                used = true
                err = m.UnderlyingSecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 364:
            if !m.EncodedUnderlyingSecurityDescLen.HasValue() {
                used = true
                err = m.EncodedUnderlyingSecurityDescLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 365:
            if !m.EncodedUnderlyingSecurityDesc.HasValue() {
                used = true
                err = m.EncodedUnderlyingSecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 877:
            if !m.UnderlyingCPProgram.HasValue() {
                used = true
                err = m.UnderlyingCPProgram.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 878:
            if !m.UnderlyingCPRegType.HasValue() {
                used = true
                err = m.UnderlyingCPRegType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 318:
            if !m.UnderlyingCurrency.HasValue() {
                used = true
                err = m.UnderlyingCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 879:
            if !m.UnderlyingQty.HasValue() {
                used = true
                err = m.UnderlyingQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 810:
            if !m.UnderlyingPx.HasValue() {
                used = true
                err = m.UnderlyingPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 882:
            if !m.UnderlyingDirtyPrice.HasValue() {
                used = true
                err = m.UnderlyingDirtyPrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 883:
            if !m.UnderlyingEndPrice.HasValue() {
                used = true
                err = m.UnderlyingEndPrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 884:
            if !m.UnderlyingStartValue.HasValue() {
                used = true
                err = m.UnderlyingStartValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 885:
            if !m.UnderlyingCurrentValue.HasValue() {
                used = true
                err = m.UnderlyingCurrentValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 886:
            if !m.UnderlyingEndValue.HasValue() {
                used = true
                err = m.UnderlyingEndValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 887:
            // This counter (NoUnderlyingStips) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.UnderlyingStips = make([]UnderlyingStipulations_UnderlyingStips, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.UnderlyingStips[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 972:
            if !m.UnderlyingAllocationPercent.HasValue() {
                used = true
                err = m.UnderlyingAllocationPercent.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 975:
            if !m.UnderlyingSettlementType.HasValue() {
                used = true
                err = m.UnderlyingSettlementType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 973:
            if !m.UnderlyingCashAmount.HasValue() {
                used = true
                err = m.UnderlyingCashAmount.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 974:
            if !m.UnderlyingCashType.HasValue() {
                used = true
                err = m.UnderlyingCashType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 998:
            if !m.UnderlyingUnitofMeasure.HasValue() {
                used = true
                err = m.UnderlyingUnitofMeasure.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1000:
            if !m.UnderlyingTimeUnit.HasValue() {
                used = true
                err = m.UnderlyingTimeUnit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1038:
            if !m.UnderlyingCapValue.HasValue() {
                used = true
                err = m.UnderlyingCapValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1058:
            // This counter (NoUndlyInstrumentParties) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.UndlyInstrumentParties = make([]UndlyInstrumentParties_UndlyInstrumentParties, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.UndlyInstrumentParties[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1039:
            if !m.UnderlyingSettlMethod.HasValue() {
                used = true
                err = m.UnderlyingSettlMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1044:
            if !m.UnderlyingAdjustedQuantity.HasValue() {
                used = true
                err = m.UnderlyingAdjustedQuantity.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1045:
            if !m.UnderlyingFXRate.HasValue() {
                used = true
                err = m.UnderlyingFXRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1046:
            if !m.UnderlyingFXRateCalc.HasValue() {
                used = true
                err = m.UnderlyingFXRateCalc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 54:
            if !m.Side.HasValue() {
                used = true
                err = m.Side.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 93:
            if !m.SignatureLength.HasValue() {
                used = true
                err = m.SignatureLength.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 89:
            if !m.Signature.HasValue() {
                used = true
                err = m.Signature.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 10:
            if !m.CheckSum.HasValue() {
                used = true
                err = m.CheckSum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


