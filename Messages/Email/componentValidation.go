package Email

import "bufio"
import "regexp"

// Autogenerated at , do not edit



import HopGrp_Hops "grgrbll/fix/Shared/HopGrp_Hops"

import RoutingGrp_RoutingIDs "grgrbll/fix/Shared/RoutingGrp_RoutingIDs"

import InstrmtGrp_RelatedSym "grgrbll/fix/Shared/InstrmtGrp_RelatedSym"

import UndInstrmtGrp_Underlyings "grgrbll/fix/Shared/UndInstrmtGrp_Underlyings"

import InstrmtLegGrp_Legs "grgrbll/fix/Shared/InstrmtLegGrp_Legs"

import LinesOfTextGrp_LinesOfText "grgrbll/fix/Shared/LinesOfTextGrp_LinesOfText"


type email_RegexValidator struct {
    BeginString *(regexp.Regexp)
    BodyLength *(regexp.Regexp)
    MsgType *(regexp.Regexp)
    SenderCompID *(regexp.Regexp)
    TargetCompID *(regexp.Regexp)
    OnBehalfOfCompID *(regexp.Regexp)
    DeliverToCompID *(regexp.Regexp)
    SecureDataLen *(regexp.Regexp)
    SecureData *(regexp.Regexp)
    MsgSeqNum *(regexp.Regexp)
    SenderSubID *(regexp.Regexp)
    SenderLocationID *(regexp.Regexp)
    TargetSubID *(regexp.Regexp)
    TargetLocationID *(regexp.Regexp)
    OnBehalfOfSubID *(regexp.Regexp)
    OnBehalfOfLocationID *(regexp.Regexp)
    DeliverToSubID *(regexp.Regexp)
    DeliverToLocationID *(regexp.Regexp)
    PossDupFlag *(regexp.Regexp)
    PossResend *(regexp.Regexp)
    SendingTime *(regexp.Regexp)
    OrigSendingTime *(regexp.Regexp)
    XmlDataLen *(regexp.Regexp)
    XmlData *(regexp.Regexp)
    MessageEncoding *(regexp.Regexp)
    LastMsgSeqNumProcessed *(regexp.Regexp)
    ApplVerID *(regexp.Regexp)
    CstmApplVerID *(regexp.Regexp)
    EmailThreadID *(regexp.Regexp)
    EmailType *(regexp.Regexp)
    OrigTime *(regexp.Regexp)
    Subject *(regexp.Regexp)
    EncodedSubjectLen *(regexp.Regexp)
    EncodedSubject *(regexp.Regexp)
    OrderID *(regexp.Regexp)
    ClOrdID *(regexp.Regexp)
    RawDataLength *(regexp.Regexp)
    RawData *(regexp.Regexp)
    SignatureLength *(regexp.Regexp)
    Signature *(regexp.Regexp)
    CheckSum *(regexp.Regexp)
    _controlBlock fixMessageControlBlock
}


var myEmail_RegexValidator email_RegexValidator

func init() {
    myEmail_RegexValidator
    myEmail_RegexValidator.BeginString = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.BodyLength = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.MsgType = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.SenderCompID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.TargetCompID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.OnBehalfOfCompID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.DeliverToCompID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.SecureDataLen = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.SecureData = regexp.MustCompile(`.*`)
    myEmail_RegexValidator.MsgSeqNum = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.SenderSubID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.SenderLocationID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.TargetSubID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.TargetLocationID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.OnBehalfOfSubID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.OnBehalfOfLocationID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.DeliverToSubID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.DeliverToLocationID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.PossDupFlag = regexp.MustCompile(`[YN]`)
    myEmail_RegexValidator.PossResend = regexp.MustCompile(`[YN]`)
    myEmail_RegexValidator.SendingTime = regexp.MustCompile(`\d{4}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])-([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](.\d{3})?`)
    myEmail_RegexValidator.OrigSendingTime = regexp.MustCompile(`\d{4}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])-([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](.\d{3})?`)
    myEmail_RegexValidator.XmlDataLen = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.XmlData = regexp.MustCompile(`.*`)
    myEmail_RegexValidator.MessageEncoding = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.LastMsgSeqNumProcessed = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.ApplVerID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.CstmApplVerID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.EmailThreadID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.EmailType = regexp.MustCompile(`[^|]`)
    myEmail_RegexValidator.OrigTime = regexp.MustCompile(`\d{4}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])-([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](.\d{3})?`)
    myEmail_RegexValidator.Subject = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.EncodedSubjectLen = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.EncodedSubject = regexp.MustCompile(`.*`)
    myEmail_RegexValidator.OrderID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.ClOrdID = regexp.MustCompile(`[^|]*`)
    myEmail_RegexValidator.RawDataLength = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.RawData = regexp.MustCompile(`.*`)
    myEmail_RegexValidator.SignatureLength = regexp.MustCompile(`\d+`)
    myEmail_RegexValidator.Signature = regexp.MustCompile(`.*`)
    myEmail_RegexValidator.CheckSum = regexp.MustCompile(`[^|]*`)
}



func (m *Email) HasRequiredFields() bool {
    valid := true
    
    

    
    
    valid = valid && m.BeginString.HasValue()
    
    
    
    valid = valid && m.BodyLength.HasValue()
    
    
    
    valid = valid && m.MsgType.HasValue()
    
    
    
    valid = valid && m.SenderCompID.HasValue()
    
    
    
    valid = valid && m.TargetCompID.HasValue()
    
    
    
    valid = valid && m.MsgSeqNum.HasValue()
    
    
    
    valid = valid && m.SendingTime.HasValue()
    
    
    
    for _, g := range(m.Hops) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.EmailThreadID.HasValue()
    
    
    
    valid = valid && m.EmailType.HasValue()
    
    
    
    valid = valid && m.Subject.HasValue()
    
    
    
    for _, g := range(m.RoutingIDs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.RelatedSym) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.Underlyings) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.Legs) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    for _, g := range(m.LinesOfText) {
        valid = valid && g.HasRequiredFields()
    }
    
    
    
    valid = valid && m.CheckSum.HasValue()
    
    
    
    
    
    return valid
}




