package TradeCaptureReportAck

import "bufio"
import "strconv"
import "fmt"

// Autogenerated at , do not edit



import HopGrp_Hops "grgrbll/fix/Shared/HopGrp_Hops"

import SecAltIDGrp_SecurityAltID "grgrbll/fix/Shared/SecAltIDGrp_SecurityAltID"

import EvntGrp_Events "grgrbll/fix/Shared/EvntGrp_Events"

import InstrumentParties_InstrumentParties "grgrbll/fix/Shared/InstrumentParties_InstrumentParties"

import TrdRegTimestamps_TrdRegTimestamps "grgrbll/fix/Shared/TrdRegTimestamps_TrdRegTimestamps"

import TrdInstrmtLegGrp_Legs "grgrbll/fix/Shared/TrdInstrmtLegGrp_Legs"

import PositionAmountData_PosAmt "grgrbll/fix/Shared/PositionAmountData_PosAmt"

import TrdCapRptAckSideGrp_Sides "grgrbll/fix/Shared/TrdCapRptAckSideGrp_Sides"

import RootParties_RootPartyIDs "grgrbll/fix/Shared/RootParties_RootPartyIDs"

import UndInstrmtGrp_Underlyings "grgrbll/fix/Shared/UndInstrmtGrp_Underlyings"


func (m *TradeCaptureReportAck) MarshalFIX(res *bufio.Writer) error {
    var err error
    
    if m.BeginString.HasValue() {
        (*res).WriteString("8=")
        val, err := m.BeginString.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.BodyLength.HasValue() {
        (*res).WriteString("9=")
        val, err := m.BodyLength.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgType.HasValue() {
        (*res).WriteString("35=")
        val, err := m.MsgType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderCompID.HasValue() {
        (*res).WriteString("49=")
        val, err := m.SenderCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetCompID.HasValue() {
        (*res).WriteString("56=")
        val, err := m.TargetCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfCompID.HasValue() {
        (*res).WriteString("115=")
        val, err := m.OnBehalfOfCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToCompID.HasValue() {
        (*res).WriteString("128=")
        val, err := m.DeliverToCompID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecureDataLen.HasValue() {
        (*res).WriteString("90=")
        val, err := m.SecureDataLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecureData.HasValue() {
        (*res).WriteString("91=")
        val, err := m.SecureData.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MsgSeqNum.HasValue() {
        (*res).WriteString("34=")
        val, err := m.MsgSeqNum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderSubID.HasValue() {
        (*res).WriteString("50=")
        val, err := m.SenderSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SenderLocationID.HasValue() {
        (*res).WriteString("142=")
        val, err := m.SenderLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetSubID.HasValue() {
        (*res).WriteString("57=")
        val, err := m.TargetSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TargetLocationID.HasValue() {
        (*res).WriteString("143=")
        val, err := m.TargetLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfSubID.HasValue() {
        (*res).WriteString("116=")
        val, err := m.OnBehalfOfSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OnBehalfOfLocationID.HasValue() {
        (*res).WriteString("144=")
        val, err := m.OnBehalfOfLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToSubID.HasValue() {
        (*res).WriteString("129=")
        val, err := m.DeliverToSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.DeliverToLocationID.HasValue() {
        (*res).WriteString("145=")
        val, err := m.DeliverToLocationID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PossDupFlag.HasValue() {
        (*res).WriteString("43=")
        val, err := m.PossDupFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PossResend.HasValue() {
        (*res).WriteString("97=")
        val, err := m.PossResend.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SendingTime.HasValue() {
        (*res).WriteString("52=")
        val, err := m.SendingTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigSendingTime.HasValue() {
        (*res).WriteString("122=")
        val, err := m.OrigSendingTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.XmlDataLen.HasValue() {
        (*res).WriteString("212=")
        val, err := m.XmlDataLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.XmlData.HasValue() {
        (*res).WriteString("213=")
        val, err := m.XmlData.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MessageEncoding.HasValue() {
        (*res).WriteString("347=")
        val, err := m.MessageEncoding.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastMsgSeqNumProcessed.HasValue() {
        (*res).WriteString("369=")
        val, err := m.LastMsgSeqNumProcessed.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Hops) > 0 {
    
    (*res).WriteString("627=")
    (*res).WriteString(strconv.Itoa(len(m.Hops)))
    (*res).WriteString("\x01")
    for _, g := range m.Hops {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.ApplVerID.HasValue() {
        (*res).WriteString("1128=")
        val, err := m.ApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CstmApplVerID.HasValue() {
        (*res).WriteString("1129=")
        val, err := m.CstmApplVerID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeReportID.HasValue() {
        (*res).WriteString("571=")
        val, err := m.TradeReportID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeReportTransType.HasValue() {
        (*res).WriteString("487=")
        val, err := m.TradeReportTransType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeReportType.HasValue() {
        (*res).WriteString("856=")
        val, err := m.TradeReportType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TrdType.HasValue() {
        (*res).WriteString("828=")
        val, err := m.TrdType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TrdSubType.HasValue() {
        (*res).WriteString("829=")
        val, err := m.TrdSubType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryTrdType.HasValue() {
        (*res).WriteString("855=")
        val, err := m.SecondaryTrdType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TransferReason.HasValue() {
        (*res).WriteString("830=")
        val, err := m.TransferReason.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExecType.HasValue() {
        (*res).WriteString("150=")
        val, err := m.ExecType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeReportRefID.HasValue() {
        (*res).WriteString("572=")
        val, err := m.TradeReportRefID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryTradeReportRefID.HasValue() {
        (*res).WriteString("881=")
        val, err := m.SecondaryTradeReportRefID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TrdRptStatus.HasValue() {
        (*res).WriteString("939=")
        val, err := m.TrdRptStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeReportRejectReason.HasValue() {
        (*res).WriteString("751=")
        val, err := m.TradeReportRejectReason.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryTradeReportID.HasValue() {
        (*res).WriteString("818=")
        val, err := m.SecondaryTradeReportID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SubscriptionRequestType.HasValue() {
        (*res).WriteString("263=")
        val, err := m.SubscriptionRequestType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeLinkID.HasValue() {
        (*res).WriteString("820=")
        val, err := m.TradeLinkID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TrdMatchID.HasValue() {
        (*res).WriteString("880=")
        val, err := m.TrdMatchID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExecID.HasValue() {
        (*res).WriteString("17=")
        val, err := m.ExecID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryExecID.HasValue() {
        (*res).WriteString("527=")
        val, err := m.SecondaryExecID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Symbol.HasValue() {
        (*res).WriteString("55=")
        val, err := m.Symbol.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SymbolSfx.HasValue() {
        (*res).WriteString("65=")
        val, err := m.SymbolSfx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityID.HasValue() {
        (*res).WriteString("48=")
        val, err := m.SecurityID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityIDSource.HasValue() {
        (*res).WriteString("22=")
        val, err := m.SecurityIDSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.SecurityAltID) > 0 {
    
    (*res).WriteString("454=")
    (*res).WriteString(strconv.Itoa(len(m.SecurityAltID)))
    (*res).WriteString("\x01")
    for _, g := range m.SecurityAltID {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.Product.HasValue() {
        (*res).WriteString("460=")
        val, err := m.Product.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CFICode.HasValue() {
        (*res).WriteString("461=")
        val, err := m.CFICode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityType.HasValue() {
        (*res).WriteString("167=")
        val, err := m.SecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecuritySubType.HasValue() {
        (*res).WriteString("762=")
        val, err := m.SecuritySubType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityMonthYear.HasValue() {
        (*res).WriteString("200=")
        val, err := m.MaturityMonthYear.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityDate.HasValue() {
        (*res).WriteString("541=")
        val, err := m.MaturityDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CouponPaymentDate.HasValue() {
        (*res).WriteString("224=")
        val, err := m.CouponPaymentDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.IssueDate.HasValue() {
        (*res).WriteString("225=")
        val, err := m.IssueDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepoCollateralSecurityType.HasValue() {
        (*res).WriteString("239=")
        val, err := m.RepoCollateralSecurityType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepurchaseTerm.HasValue() {
        (*res).WriteString("226=")
        val, err := m.RepurchaseTerm.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RepurchaseRate.HasValue() {
        (*res).WriteString("227=")
        val, err := m.RepurchaseRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Factor.HasValue() {
        (*res).WriteString("228=")
        val, err := m.Factor.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CreditRating.HasValue() {
        (*res).WriteString("255=")
        val, err := m.CreditRating.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InstrRegistry.HasValue() {
        (*res).WriteString("543=")
        val, err := m.InstrRegistry.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CountryOfIssue.HasValue() {
        (*res).WriteString("470=")
        val, err := m.CountryOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StateOrProvinceOfIssue.HasValue() {
        (*res).WriteString("471=")
        val, err := m.StateOrProvinceOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LocaleOfIssue.HasValue() {
        (*res).WriteString("472=")
        val, err := m.LocaleOfIssue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RedemptionDate.HasValue() {
        (*res).WriteString("240=")
        val, err := m.RedemptionDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikePrice.HasValue() {
        (*res).WriteString("202=")
        val, err := m.StrikePrice.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeCurrency.HasValue() {
        (*res).WriteString("947=")
        val, err := m.StrikeCurrency.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OptAttribute.HasValue() {
        (*res).WriteString("206=")
        val, err := m.OptAttribute.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ContractMultiplier.HasValue() {
        (*res).WriteString("231=")
        val, err := m.ContractMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CouponRate.HasValue() {
        (*res).WriteString("223=")
        val, err := m.CouponRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityExchange.HasValue() {
        (*res).WriteString("207=")
        val, err := m.SecurityExchange.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Issuer.HasValue() {
        (*res).WriteString("106=")
        val, err := m.Issuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedIssuerLen.HasValue() {
        (*res).WriteString("348=")
        val, err := m.EncodedIssuerLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedIssuer.HasValue() {
        (*res).WriteString("349=")
        val, err := m.EncodedIssuer.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityDesc.HasValue() {
        (*res).WriteString("107=")
        val, err := m.SecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedSecurityDescLen.HasValue() {
        (*res).WriteString("350=")
        val, err := m.EncodedSecurityDescLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedSecurityDesc.HasValue() {
        (*res).WriteString("351=")
        val, err := m.EncodedSecurityDesc.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Pool.HasValue() {
        (*res).WriteString("691=")
        val, err := m.Pool.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ContractSettlMonth.HasValue() {
        (*res).WriteString("667=")
        val, err := m.ContractSettlMonth.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CPProgram.HasValue() {
        (*res).WriteString("875=")
        val, err := m.CPProgram.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CPRegType.HasValue() {
        (*res).WriteString("876=")
        val, err := m.CPRegType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Events) > 0 {
    
    (*res).WriteString("864=")
    (*res).WriteString(strconv.Itoa(len(m.Events)))
    (*res).WriteString("\x01")
    for _, g := range m.Events {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.DatedDate.HasValue() {
        (*res).WriteString("873=")
        val, err := m.DatedDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InterestAccrualDate.HasValue() {
        (*res).WriteString("874=")
        val, err := m.InterestAccrualDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecurityStatus.HasValue() {
        (*res).WriteString("965=")
        val, err := m.SecurityStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettleOnOpenFlag.HasValue() {
        (*res).WriteString("966=")
        val, err := m.SettleOnOpenFlag.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.InstrmtAssignmentMethod.HasValue() {
        (*res).WriteString("1049=")
        val, err := m.InstrmtAssignmentMethod.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeMultiplier.HasValue() {
        (*res).WriteString("967=")
        val, err := m.StrikeMultiplier.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.StrikeValue.HasValue() {
        (*res).WriteString("968=")
        val, err := m.StrikeValue.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MinPriceIncrement.HasValue() {
        (*res).WriteString("969=")
        val, err := m.MinPriceIncrement.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PositionLimit.HasValue() {
        (*res).WriteString("970=")
        val, err := m.PositionLimit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.NTPositionLimit.HasValue() {
        (*res).WriteString("971=")
        val, err := m.NTPositionLimit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.InstrumentParties) > 0 {
    
    (*res).WriteString("1018=")
    (*res).WriteString(strconv.Itoa(len(m.InstrumentParties)))
    (*res).WriteString("\x01")
    for _, g := range m.InstrumentParties {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.UnitofMeasure.HasValue() {
        (*res).WriteString("996=")
        val, err := m.UnitofMeasure.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TimeUnit.HasValue() {
        (*res).WriteString("997=")
        val, err := m.TimeUnit.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MaturityTime.HasValue() {
        (*res).WriteString("1079=")
        val, err := m.MaturityTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TransactTime.HasValue() {
        (*res).WriteString("60=")
        val, err := m.TransactTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.TrdRegTimestamps) > 0 {
    
    (*res).WriteString("768=")
    (*res).WriteString(strconv.Itoa(len(m.TrdRegTimestamps)))
    (*res).WriteString("\x01")
    for _, g := range m.TrdRegTimestamps {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.ResponseTransportType.HasValue() {
        (*res).WriteString("725=")
        val, err := m.ResponseTransportType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ResponseDestination.HasValue() {
        (*res).WriteString("726=")
        val, err := m.ResponseDestination.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Text.HasValue() {
        (*res).WriteString("58=")
        val, err := m.Text.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedTextLen.HasValue() {
        (*res).WriteString("354=")
        val, err := m.EncodedTextLen.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.EncodedText.HasValue() {
        (*res).WriteString("355=")
        val, err := m.EncodedText.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Legs) > 0 {
    
    (*res).WriteString("555=")
    (*res).WriteString(strconv.Itoa(len(m.Legs)))
    (*res).WriteString("\x01")
    for _, g := range m.Legs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.ClearingFeeIndicator.HasValue() {
        (*res).WriteString("635=")
        val, err := m.ClearingFeeIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrdStatus.HasValue() {
        (*res).WriteString("39=")
        val, err := m.OrdStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ExecRestatementReason.HasValue() {
        (*res).WriteString("378=")
        val, err := m.ExecRestatementReason.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PreviouslyReported.HasValue() {
        (*res).WriteString("570=")
        val, err := m.PreviouslyReported.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PriceType.HasValue() {
        (*res).WriteString("423=")
        val, err := m.PriceType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingTradingSessionID.HasValue() {
        (*res).WriteString("822=")
        val, err := m.UnderlyingTradingSessionID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.QtyType.HasValue() {
        (*res).WriteString("854=")
        val, err := m.QtyType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.UnderlyingTradingSessionSubID.HasValue() {
        (*res).WriteString("823=")
        val, err := m.UnderlyingTradingSessionSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastQty.HasValue() {
        (*res).WriteString("32=")
        val, err := m.LastQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastPx.HasValue() {
        (*res).WriteString("31=")
        val, err := m.LastPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastParPx.HasValue() {
        (*res).WriteString("669=")
        val, err := m.LastParPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastSpotRate.HasValue() {
        (*res).WriteString("194=")
        val, err := m.LastSpotRate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastForwardPoints.HasValue() {
        (*res).WriteString("195=")
        val, err := m.LastForwardPoints.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastMkt.HasValue() {
        (*res).WriteString("30=")
        val, err := m.LastMkt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeDate.HasValue() {
        (*res).WriteString("75=")
        val, err := m.TradeDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ClearingBusinessDate.HasValue() {
        (*res).WriteString("715=")
        val, err := m.ClearingBusinessDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AvgPx.HasValue() {
        (*res).WriteString("6=")
        val, err := m.AvgPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.AvgPxIndicator.HasValue() {
        (*res).WriteString("819=")
        val, err := m.AvgPxIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MultiLegReportingType.HasValue() {
        (*res).WriteString("442=")
        val, err := m.MultiLegReportingType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeLegRefID.HasValue() {
        (*res).WriteString("824=")
        val, err := m.TradeLegRefID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlType.HasValue() {
        (*res).WriteString("63=")
        val, err := m.SettlType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MatchStatus.HasValue() {
        (*res).WriteString("573=")
        val, err := m.MatchStatus.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MatchType.HasValue() {
        (*res).WriteString("574=")
        val, err := m.MatchType.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CopyMsgIndicator.HasValue() {
        (*res).WriteString("797=")
        val, err := m.CopyMsgIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.PublishTrdIndicator.HasValue() {
        (*res).WriteString("852=")
        val, err := m.PublishTrdIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.ShortSaleReason.HasValue() {
        (*res).WriteString("853=")
        val, err := m.ShortSaleReason.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlDate.HasValue() {
        (*res).WriteString("64=")
        val, err := m.SettlDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlSessID.HasValue() {
        (*res).WriteString("716=")
        val, err := m.SettlSessID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SettlSessSubID.HasValue() {
        (*res).WriteString("717=")
        val, err := m.SettlSessSubID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.PosAmt) > 0 {
    
    (*res).WriteString("753=")
    (*res).WriteString(strconv.Itoa(len(m.PosAmt)))
    (*res).WriteString("\x01")
    for _, g := range m.PosAmt {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.TierCode.HasValue() {
        (*res).WriteString("994=")
        val, err := m.TierCode.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.MessageEventSource.HasValue() {
        (*res).WriteString("1011=")
        val, err := m.MessageEventSource.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastUpdateTime.HasValue() {
        (*res).WriteString("779=")
        val, err := m.LastUpdateTime.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.RndPx.HasValue() {
        (*res).WriteString("991=")
        val, err := m.RndPx.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    
    (*res).WriteString("552=")
    (*res).WriteString(strconv.Itoa(len(m.Sides)))
    (*res).WriteString("\x01")
    for _, g := range m.Sides {
        err = g.MarshalFIX(res)
    }
    
    if m.AsOfIndicator.HasValue() {
        (*res).WriteString("1015=")
        val, err := m.AsOfIndicator.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.TradeID.HasValue() {
        (*res).WriteString("1003=")
        val, err := m.TradeID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryTradeID.HasValue() {
        (*res).WriteString("1040=")
        val, err := m.SecondaryTradeID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.FirmTradeID.HasValue() {
        (*res).WriteString("1041=")
        val, err := m.FirmTradeID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SecondaryFirmTradeID.HasValue() {
        (*res).WriteString("1042=")
        val, err := m.SecondaryFirmTradeID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CalculatedCcyLastQty.HasValue() {
        (*res).WriteString("1056=")
        val, err := m.CalculatedCcyLastQty.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.LastSwapPoints.HasValue() {
        (*res).WriteString("1071=")
        val, err := m.LastSwapPoints.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.GrossTradeAmt.HasValue() {
        (*res).WriteString("381=")
        val, err := m.GrossTradeAmt.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.RootPartyIDs) > 0 {
    
    (*res).WriteString("1116=")
    (*res).WriteString(strconv.Itoa(len(m.RootPartyIDs)))
    (*res).WriteString("\x01")
    for _, g := range m.RootPartyIDs {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.TradeHandlingInstr.HasValue() {
        (*res).WriteString("1123=")
        val, err := m.TradeHandlingInstr.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigTradeHandlingInstr.HasValue() {
        (*res).WriteString("1124=")
        val, err := m.OrigTradeHandlingInstr.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigTradeDate.HasValue() {
        (*res).WriteString("1125=")
        val, err := m.OrigTradeDate.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigTradeID.HasValue() {
        (*res).WriteString("1126=")
        val, err := m.OrigTradeID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.OrigSecondaryTradeID.HasValue() {
        (*res).WriteString("1127=")
        val, err := m.OrigSecondaryTradeID.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if len(m.Underlyings) > 0 {
    
    (*res).WriteString("711=")
    (*res).WriteString(strconv.Itoa(len(m.Underlyings)))
    (*res).WriteString("\x01")
    for _, g := range m.Underlyings {
        err = g.MarshalFIX(res)
    }
    }
    
    if m.RptSys.HasValue() {
        (*res).WriteString("1135=")
        val, err := m.RptSys.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.SignatureLength.HasValue() {
        (*res).WriteString("93=")
        val, err := m.SignatureLength.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.Signature.HasValue() {
        (*res).WriteString("89=")
        val, err := m.Signature.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    if m.CheckSum.HasValue() {
        (*res).WriteString("10=")
        val, err := m.CheckSum.MarshalFIX()
        if err != nil {
            return err
        }
        (*res).Write(val)
        (*res).WriteString("\x01")
    }
    return err
}

func (m *TradeCaptureReportAck) UnmarshalFIX(input io.Reader) error {
    var err error
    var field []byte
    for field, err = input.ReadSlice([]byte("\x01")); err == nil {
        slices = bytes.Split(field, []byte("="))
        if len(slices) != 2 {
            // TODO handle data fields
            err = errors.New(fmt.Sprintf("Found field without seperator '=' (%s)", string(field))
        } else {
            var used bool
            used, err m.UnmarshalFieldFIX(strconv.Atoi(string(slices[0])), slices[1])
            if !used {
                err = errors.New(fmt.Sprintf("Field unused by message TradeCaptureReportAck (%s)", string(field)))
            }
        }
        if err != nil {
            break
        }
    }
    return err
}


func (m *TradeCaptureReportAck) UnmarshalFieldFIX(id int, value []byte) (bool, error) {
    // Check if we are currently populating a group
    used := false
    var err error = nil
    for !used && m._controlBlock.mostRecentRepeatingGroup != nil {
        used = m._controlBlock.mostRecentRepeatingGroup[m._controlBlock.mostRecentRepeatingGroupCounter].PopulateNextFieldById(id, value)
        if !used {
            // This group did not need use the latest field, and has all its mandatory fields, so consider it complete.
            m._controlBlock.mostRecentRepeatingGroupCounter++
            if m._controlBlock.mostRecentRepeatingGroupCounter >= len(m._controlBlock.mostRecentRepeatingGroup)  {
                // we have all the repeated groups we expected.
                m._controlBlock.mostRecentRepeatingGroup = nil
            }
        }
    }
    
    // If one of the groups did not consume the KV, try our own fields 
    if !used {
        switch id {
        
        case 8:
            if !m.BeginString.HasValue() {
                used = true
                err = m.BeginString.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 9:
            if !m.BodyLength.HasValue() {
                used = true
                err = m.BodyLength.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 35:
            if !m.MsgType.HasValue() {
                used = true
                err = m.MsgType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 49:
            if !m.SenderCompID.HasValue() {
                used = true
                err = m.SenderCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 56:
            if !m.TargetCompID.HasValue() {
                used = true
                err = m.TargetCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 115:
            if !m.OnBehalfOfCompID.HasValue() {
                used = true
                err = m.OnBehalfOfCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 128:
            if !m.DeliverToCompID.HasValue() {
                used = true
                err = m.DeliverToCompID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 90:
            if !m.SecureDataLen.HasValue() {
                used = true
                err = m.SecureDataLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 91:
            if !m.SecureData.HasValue() {
                used = true
                err = m.SecureData.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 34:
            if !m.MsgSeqNum.HasValue() {
                used = true
                err = m.MsgSeqNum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 50:
            if !m.SenderSubID.HasValue() {
                used = true
                err = m.SenderSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 142:
            if !m.SenderLocationID.HasValue() {
                used = true
                err = m.SenderLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 57:
            if !m.TargetSubID.HasValue() {
                used = true
                err = m.TargetSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 143:
            if !m.TargetLocationID.HasValue() {
                used = true
                err = m.TargetLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 116:
            if !m.OnBehalfOfSubID.HasValue() {
                used = true
                err = m.OnBehalfOfSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 144:
            if !m.OnBehalfOfLocationID.HasValue() {
                used = true
                err = m.OnBehalfOfLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 129:
            if !m.DeliverToSubID.HasValue() {
                used = true
                err = m.DeliverToSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 145:
            if !m.DeliverToLocationID.HasValue() {
                used = true
                err = m.DeliverToLocationID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 43:
            if !m.PossDupFlag.HasValue() {
                used = true
                err = m.PossDupFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 97:
            if !m.PossResend.HasValue() {
                used = true
                err = m.PossResend.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 52:
            if !m.SendingTime.HasValue() {
                used = true
                err = m.SendingTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 122:
            if !m.OrigSendingTime.HasValue() {
                used = true
                err = m.OrigSendingTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 212:
            if !m.XmlDataLen.HasValue() {
                used = true
                err = m.XmlDataLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 213:
            if !m.XmlData.HasValue() {
                used = true
                err = m.XmlData.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 347:
            if !m.MessageEncoding.HasValue() {
                used = true
                err = m.MessageEncoding.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 369:
            if !m.LastMsgSeqNumProcessed.HasValue() {
                used = true
                err = m.LastMsgSeqNumProcessed.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 627:
            // This counter (NoHops) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Hops = make([]HopGrp_Hops, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Hops[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1128:
            if !m.ApplVerID.HasValue() {
                used = true
                err = m.ApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1129:
            if !m.CstmApplVerID.HasValue() {
                used = true
                err = m.CstmApplVerID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 571:
            if !m.TradeReportID.HasValue() {
                used = true
                err = m.TradeReportID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 487:
            if !m.TradeReportTransType.HasValue() {
                used = true
                err = m.TradeReportTransType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 856:
            if !m.TradeReportType.HasValue() {
                used = true
                err = m.TradeReportType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 828:
            if !m.TrdType.HasValue() {
                used = true
                err = m.TrdType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 829:
            if !m.TrdSubType.HasValue() {
                used = true
                err = m.TrdSubType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 855:
            if !m.SecondaryTrdType.HasValue() {
                used = true
                err = m.SecondaryTrdType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 830:
            if !m.TransferReason.HasValue() {
                used = true
                err = m.TransferReason.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 150:
            if !m.ExecType.HasValue() {
                used = true
                err = m.ExecType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 572:
            if !m.TradeReportRefID.HasValue() {
                used = true
                err = m.TradeReportRefID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 881:
            if !m.SecondaryTradeReportRefID.HasValue() {
                used = true
                err = m.SecondaryTradeReportRefID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 939:
            if !m.TrdRptStatus.HasValue() {
                used = true
                err = m.TrdRptStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 751:
            if !m.TradeReportRejectReason.HasValue() {
                used = true
                err = m.TradeReportRejectReason.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 818:
            if !m.SecondaryTradeReportID.HasValue() {
                used = true
                err = m.SecondaryTradeReportID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 263:
            if !m.SubscriptionRequestType.HasValue() {
                used = true
                err = m.SubscriptionRequestType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 820:
            if !m.TradeLinkID.HasValue() {
                used = true
                err = m.TradeLinkID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 880:
            if !m.TrdMatchID.HasValue() {
                used = true
                err = m.TrdMatchID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 17:
            if !m.ExecID.HasValue() {
                used = true
                err = m.ExecID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 527:
            if !m.SecondaryExecID.HasValue() {
                used = true
                err = m.SecondaryExecID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 55:
            if !m.Symbol.HasValue() {
                used = true
                err = m.Symbol.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 65:
            if !m.SymbolSfx.HasValue() {
                used = true
                err = m.SymbolSfx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 48:
            if !m.SecurityID.HasValue() {
                used = true
                err = m.SecurityID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 22:
            if !m.SecurityIDSource.HasValue() {
                used = true
                err = m.SecurityIDSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 454:
            // This counter (NoSecurityAltID) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.SecurityAltID = make([]SecAltIDGrp_SecurityAltID, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.SecurityAltID[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 460:
            if !m.Product.HasValue() {
                used = true
                err = m.Product.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 461:
            if !m.CFICode.HasValue() {
                used = true
                err = m.CFICode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 167:
            if !m.SecurityType.HasValue() {
                used = true
                err = m.SecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 762:
            if !m.SecuritySubType.HasValue() {
                used = true
                err = m.SecuritySubType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 200:
            if !m.MaturityMonthYear.HasValue() {
                used = true
                err = m.MaturityMonthYear.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 541:
            if !m.MaturityDate.HasValue() {
                used = true
                err = m.MaturityDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 224:
            if !m.CouponPaymentDate.HasValue() {
                used = true
                err = m.CouponPaymentDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 225:
            if !m.IssueDate.HasValue() {
                used = true
                err = m.IssueDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 239:
            if !m.RepoCollateralSecurityType.HasValue() {
                used = true
                err = m.RepoCollateralSecurityType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 226:
            if !m.RepurchaseTerm.HasValue() {
                used = true
                err = m.RepurchaseTerm.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 227:
            if !m.RepurchaseRate.HasValue() {
                used = true
                err = m.RepurchaseRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 228:
            if !m.Factor.HasValue() {
                used = true
                err = m.Factor.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 255:
            if !m.CreditRating.HasValue() {
                used = true
                err = m.CreditRating.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 543:
            if !m.InstrRegistry.HasValue() {
                used = true
                err = m.InstrRegistry.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 470:
            if !m.CountryOfIssue.HasValue() {
                used = true
                err = m.CountryOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 471:
            if !m.StateOrProvinceOfIssue.HasValue() {
                used = true
                err = m.StateOrProvinceOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 472:
            if !m.LocaleOfIssue.HasValue() {
                used = true
                err = m.LocaleOfIssue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 240:
            if !m.RedemptionDate.HasValue() {
                used = true
                err = m.RedemptionDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 202:
            if !m.StrikePrice.HasValue() {
                used = true
                err = m.StrikePrice.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 947:
            if !m.StrikeCurrency.HasValue() {
                used = true
                err = m.StrikeCurrency.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 206:
            if !m.OptAttribute.HasValue() {
                used = true
                err = m.OptAttribute.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 231:
            if !m.ContractMultiplier.HasValue() {
                used = true
                err = m.ContractMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 223:
            if !m.CouponRate.HasValue() {
                used = true
                err = m.CouponRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 207:
            if !m.SecurityExchange.HasValue() {
                used = true
                err = m.SecurityExchange.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 106:
            if !m.Issuer.HasValue() {
                used = true
                err = m.Issuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 348:
            if !m.EncodedIssuerLen.HasValue() {
                used = true
                err = m.EncodedIssuerLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 349:
            if !m.EncodedIssuer.HasValue() {
                used = true
                err = m.EncodedIssuer.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 107:
            if !m.SecurityDesc.HasValue() {
                used = true
                err = m.SecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 350:
            if !m.EncodedSecurityDescLen.HasValue() {
                used = true
                err = m.EncodedSecurityDescLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 351:
            if !m.EncodedSecurityDesc.HasValue() {
                used = true
                err = m.EncodedSecurityDesc.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 691:
            if !m.Pool.HasValue() {
                used = true
                err = m.Pool.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 667:
            if !m.ContractSettlMonth.HasValue() {
                used = true
                err = m.ContractSettlMonth.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 875:
            if !m.CPProgram.HasValue() {
                used = true
                err = m.CPProgram.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 876:
            if !m.CPRegType.HasValue() {
                used = true
                err = m.CPRegType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 864:
            // This counter (NoEvents) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Events = make([]EvntGrp_Events, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Events[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 873:
            if !m.DatedDate.HasValue() {
                used = true
                err = m.DatedDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 874:
            if !m.InterestAccrualDate.HasValue() {
                used = true
                err = m.InterestAccrualDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 965:
            if !m.SecurityStatus.HasValue() {
                used = true
                err = m.SecurityStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 966:
            if !m.SettleOnOpenFlag.HasValue() {
                used = true
                err = m.SettleOnOpenFlag.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1049:
            if !m.InstrmtAssignmentMethod.HasValue() {
                used = true
                err = m.InstrmtAssignmentMethod.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 967:
            if !m.StrikeMultiplier.HasValue() {
                used = true
                err = m.StrikeMultiplier.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 968:
            if !m.StrikeValue.HasValue() {
                used = true
                err = m.StrikeValue.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 969:
            if !m.MinPriceIncrement.HasValue() {
                used = true
                err = m.MinPriceIncrement.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 970:
            if !m.PositionLimit.HasValue() {
                used = true
                err = m.PositionLimit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 971:
            if !m.NTPositionLimit.HasValue() {
                used = true
                err = m.NTPositionLimit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1018:
            // This counter (NoInstrumentParties) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.InstrumentParties = make([]InstrumentParties_InstrumentParties, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.InstrumentParties[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 996:
            if !m.UnitofMeasure.HasValue() {
                used = true
                err = m.UnitofMeasure.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 997:
            if !m.TimeUnit.HasValue() {
                used = true
                err = m.TimeUnit.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1079:
            if !m.MaturityTime.HasValue() {
                used = true
                err = m.MaturityTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 60:
            if !m.TransactTime.HasValue() {
                used = true
                err = m.TransactTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 768:
            // This counter (NoTrdRegTimestamps) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.TrdRegTimestamps = make([]TrdRegTimestamps_TrdRegTimestamps, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.TrdRegTimestamps[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 725:
            if !m.ResponseTransportType.HasValue() {
                used = true
                err = m.ResponseTransportType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 726:
            if !m.ResponseDestination.HasValue() {
                used = true
                err = m.ResponseDestination.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 58:
            if !m.Text.HasValue() {
                used = true
                err = m.Text.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 354:
            if !m.EncodedTextLen.HasValue() {
                used = true
                err = m.EncodedTextLen.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 355:
            if !m.EncodedText.HasValue() {
                used = true
                err = m.EncodedText.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 555:
            // This counter (NoLegs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Legs = make([]TrdInstrmtLegGrp_Legs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Legs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 635:
            if !m.ClearingFeeIndicator.HasValue() {
                used = true
                err = m.ClearingFeeIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 39:
            if !m.OrdStatus.HasValue() {
                used = true
                err = m.OrdStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 378:
            if !m.ExecRestatementReason.HasValue() {
                used = true
                err = m.ExecRestatementReason.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 570:
            if !m.PreviouslyReported.HasValue() {
                used = true
                err = m.PreviouslyReported.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 423:
            if !m.PriceType.HasValue() {
                used = true
                err = m.PriceType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 822:
            if !m.UnderlyingTradingSessionID.HasValue() {
                used = true
                err = m.UnderlyingTradingSessionID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 854:
            if !m.QtyType.HasValue() {
                used = true
                err = m.QtyType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 823:
            if !m.UnderlyingTradingSessionSubID.HasValue() {
                used = true
                err = m.UnderlyingTradingSessionSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 32:
            if !m.LastQty.HasValue() {
                used = true
                err = m.LastQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 31:
            if !m.LastPx.HasValue() {
                used = true
                err = m.LastPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 669:
            if !m.LastParPx.HasValue() {
                used = true
                err = m.LastParPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 194:
            if !m.LastSpotRate.HasValue() {
                used = true
                err = m.LastSpotRate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 195:
            if !m.LastForwardPoints.HasValue() {
                used = true
                err = m.LastForwardPoints.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 30:
            if !m.LastMkt.HasValue() {
                used = true
                err = m.LastMkt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 75:
            if !m.TradeDate.HasValue() {
                used = true
                err = m.TradeDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 715:
            if !m.ClearingBusinessDate.HasValue() {
                used = true
                err = m.ClearingBusinessDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 6:
            if !m.AvgPx.HasValue() {
                used = true
                err = m.AvgPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 819:
            if !m.AvgPxIndicator.HasValue() {
                used = true
                err = m.AvgPxIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 442:
            if !m.MultiLegReportingType.HasValue() {
                used = true
                err = m.MultiLegReportingType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 824:
            if !m.TradeLegRefID.HasValue() {
                used = true
                err = m.TradeLegRefID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 63:
            if !m.SettlType.HasValue() {
                used = true
                err = m.SettlType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 573:
            if !m.MatchStatus.HasValue() {
                used = true
                err = m.MatchStatus.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 574:
            if !m.MatchType.HasValue() {
                used = true
                err = m.MatchType.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 797:
            if !m.CopyMsgIndicator.HasValue() {
                used = true
                err = m.CopyMsgIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 852:
            if !m.PublishTrdIndicator.HasValue() {
                used = true
                err = m.PublishTrdIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 853:
            if !m.ShortSaleReason.HasValue() {
                used = true
                err = m.ShortSaleReason.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 64:
            if !m.SettlDate.HasValue() {
                used = true
                err = m.SettlDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 716:
            if !m.SettlSessID.HasValue() {
                used = true
                err = m.SettlSessID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 717:
            if !m.SettlSessSubID.HasValue() {
                used = true
                err = m.SettlSessSubID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 753:
            // This counter (NoPosAmt) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.PosAmt = make([]PositionAmountData_PosAmt, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.PosAmt[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 994:
            if !m.TierCode.HasValue() {
                used = true
                err = m.TierCode.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1011:
            if !m.MessageEventSource.HasValue() {
                used = true
                err = m.MessageEventSource.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 779:
            if !m.LastUpdateTime.HasValue() {
                used = true
                err = m.LastUpdateTime.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 991:
            if !m.RndPx.HasValue() {
                used = true
                err = m.RndPx.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 552:
            // This counter (NoSides) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Sides = make([]TrdCapRptAckSideGrp_Sides, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Sides[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1015:
            if !m.AsOfIndicator.HasValue() {
                used = true
                err = m.AsOfIndicator.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1003:
            if !m.TradeID.HasValue() {
                used = true
                err = m.TradeID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1040:
            if !m.SecondaryTradeID.HasValue() {
                used = true
                err = m.SecondaryTradeID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1041:
            if !m.FirmTradeID.HasValue() {
                used = true
                err = m.FirmTradeID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1042:
            if !m.SecondaryFirmTradeID.HasValue() {
                used = true
                err = m.SecondaryFirmTradeID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1056:
            if !m.CalculatedCcyLastQty.HasValue() {
                used = true
                err = m.CalculatedCcyLastQty.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1071:
            if !m.LastSwapPoints.HasValue() {
                used = true
                err = m.LastSwapPoints.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 381:
            if !m.GrossTradeAmt.HasValue() {
                used = true
                err = m.GrossTradeAmt.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1116:
            // This counter (NoRootPartyIDs) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.RootPartyIDs = make([]RootParties_RootPartyIDs, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.RootPartyIDs[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1123:
            if !m.TradeHandlingInstr.HasValue() {
                used = true
                err = m.TradeHandlingInstr.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1124:
            if !m.OrigTradeHandlingInstr.HasValue() {
                used = true
                err = m.OrigTradeHandlingInstr.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1125:
            if !m.OrigTradeDate.HasValue() {
                used = true
                err = m.OrigTradeDate.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1126:
            if !m.OrigTradeID.HasValue() {
                used = true
                err = m.OrigTradeID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 1127:
            if !m.OrigSecondaryTradeID.HasValue() {
                used = true
                err = m.OrigSecondaryTradeID.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 711:
            // This counter (NoUnderlyings) indicates the start of repeated group block 
            count, _ := strconv.Atoi(value)
            m.Underlyings = make([]UndInstrmtGrp_Underlyings, count)
            m._controlBlock.mostRecentRepeatingGroup = make([]FixMessage, count)
            for i := 0; i < count; i++ {
                m._controlBlock.mostRecentRepeatingGroup[i] = &m.Underlyings[i]
            }
            m._controlBlock.mostRecentRepeatingGroupCounter = 0
            used = true
        
        
        
        case 1135:
            if !m.RptSys.HasValue() {
                used = true
                err = m.RptSys.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 93:
            if !m.SignatureLength.HasValue() {
                used = true
                err = m.SignatureLength.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 89:
            if !m.Signature.HasValue() {
                used = true
                err = m.Signature.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        
        case 10:
            if !m.CheckSum.HasValue() {
                used = true
                err = m.CheckSum.UnmarshalFIX(value)
                if err != nil {
                    return used, err
                }
            }
        
        
        default:
            used = false
        }
    }
   
    return used, err
}


