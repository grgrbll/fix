// Autogenerated at {{ generated_time }}, do not edit

{% for componentName, component in definitions.items() %}
{% for comp_import in component["component_imports"] %}
import {{comp_import}}
{% endfor %}

type {{ toPrivate(componentName) }}_RegexValidator struct {
    {%- for fieldName, fieldData in component['fields'].items() %}
    {%- if isBasic(fieldData) %}
    {{fieldName}} *(regexp.Regexp)
    {%- endif -%}
    {% endfor %}
    _controlBlock fixMessageControlBlock
}


var my{{ componentName }}_RegexValidator {{ toPrivate(componentName) }}_RegexValidator

func init() {
    my{{ componentName }}_RegexValidator
    {%- for fieldName, fieldData in component['fields'].items() %}
    {%- if isBasic(fieldData) %}
    my{{ componentName }}_RegexValidator.{{fieldName}} = regexp.MustCompile(`{{fieldData.get('validation_regex','.*')}}`)
    {%- endif -%}
    {% endfor %}
}



func (m *{{ componentName }}) HasRequiredFields() bool {
    valid := true
    
    {% for validationGroupName in component['validationGroups'] -%}
    isSet{{validationGroupName}} := false
    isValid{{validationGroupName}} := true
    {%- endfor %}

    {% for fieldName, fieldData in component['fields'].items() -%}
    {% if isRequired(fieldData) and isBasic(fieldData) %}
    {% if "validationGroup" in fieldData %}
    isSet{{fieldData['validationGroup']}} = isSet{{fieldData['validationGroup']}} || m.{{fieldName}}.HasValue()
    isValid{{fieldData['validationGroup']}} = isValid{{fieldData['validationGroup']}} && m.{{fieldName}}.HasValue()
    {% else %}
    valid = valid && m.{{fieldName}}.HasValue()
    {% endif %}
    {% elif isComponent(fieldData) %}
    valid = valid && m.{{fieldName}}.HasRequiredFields()
    {% elif isRepeat(fieldData) %}
    {% if "validationGroup" in fieldData %}
    isSet{{fieldData['validationGroup']}} = isSet{{fieldData['validationGroup']}} || len(m.{{fieldName}}) > 0
    for _, g := range(m.{{fieldName}}) {
        isValid{{fieldData['validationGroup']}} = isValid{{fieldData['validationGroup']}} && g.HasRequiredFields()
    }
    {% else %}
    for _, g := range(m.{{fieldName}}) {
        valid = valid && g.HasRequiredFields()
    }
    {% endif %}
    {% endif %}
    {%- endfor %}
    
    {% for validationGroupName in component['validationGroups'] -%}
    valid = valid && (isSet{{validationGroupName}} == false || isValid{{validationGroupName}})
    {%- endfor %}
    
    return valid
}


{% endfor %}


